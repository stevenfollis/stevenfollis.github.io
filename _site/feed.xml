<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-10-17T11:02:15-04:00</updated><id>http://localhost:4000/</id><title type="html">Steven Follis</title><subtitle>Thoughts on technology by Steven Follis</subtitle><entry><title type="html">Modernizing the Web Matrix Fourth Coffee Bakery Application with Docker and Visual Studio</title><link href="http://localhost:4000/2017/10/17/modernizing-bakery-application-docker-visual-studio/" rel="alternate" type="text/html" title="Modernizing the Web Matrix Fourth Coffee Bakery Application with Docker and Visual Studio" /><published>2017-10-17T02:00:00-04:00</published><updated>2017-10-17T02:00:00-04:00</updated><id>http://localhost:4000/2017/10/17/modernizing-bakery-application-docker-visual-studio</id><content type="html" xml:base="http://localhost:4000/2017/10/17/modernizing-bakery-application-docker-visual-studio/">&lt;p&gt;&lt;a href=&quot;https://www.microsoft.com/web/webmatrix/&quot;&gt;Web Matrix&lt;/a&gt; is a code editor that has been around for a &lt;em&gt;very&lt;/em&gt; long time and will [sadly] reach end of life on &lt;a href=&quot;https://blogs.iis.net/webmatrix/webmatrix-product-support-ends-on-november-1st-2017&quot;&gt;November 1, 2017&lt;/a&gt;. In honor of this sad day, I wanted to take one of Web Matrix’s starter applications, and generate a Docker File for it.&lt;/p&gt;

&lt;p&gt;Why? The sample applications within Web Matrix are old. These 5+ year old web applications pre-date modern MVC patterns and technology, but are representative of legacy applications that enterprises struggle to maintain today. By moving a legacy application into a Docker container, we can move the application to run on a modern infrastructure (Server 2016, Azure, etc.), make deployments far easier via a CI/CD pipeline, and decrease the inherent attack surface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-logo.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-Requisites&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.docker.com/docker-windows&quot;&gt;Docker for Windows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.visualstudio.com/vs/community/&quot;&gt;Visual Studio 2017 Community Edition&lt;/a&gt; (or similar)&lt;/li&gt;
  &lt;li&gt;SQL Server Express (or better) running locally&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;install-web-matrix&quot;&gt;Install Web Matrix&lt;/h2&gt;

&lt;p&gt;Web Matrix 3.0 can be installed via the &lt;a href=&quot;http://go.microsoft.com/fwlink/?LinkID=286266&quot;&gt;Web Platform Installer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-01.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Download the WP installer and run the setup program. Any dependencies needed will be automatically downloaded as part of the process (nifty!).&lt;/p&gt;

&lt;p&gt;After installing, start the Web Matrix application.&lt;/p&gt;

&lt;h1 id=&quot;part-1-the-web-application&quot;&gt;Part 1: The Web Application&lt;/h1&gt;

&lt;h2 id=&quot;create-a-sample-bakery-application&quot;&gt;Create a sample Bakery application&lt;/h2&gt;

&lt;p&gt;When Web Matrix is first started, you are greeted with a few options. For our purposes today, select &lt;strong&gt;New&lt;/strong&gt; and &lt;strong&gt;Template Gallery&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-02.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Template Gallery contains several options. Select the &lt;strong&gt;Bakery&lt;/strong&gt; template tile, and name the site &lt;strong&gt;Bakery&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-03.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Feel free to try this same exercise with the Photo Gallery or Personal Site templates&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once selected, Web Matrix will download the source files for the application from the internet and pull down any dependencies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-04.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the solution is visible, click &lt;strong&gt;Run&lt;/strong&gt; from the top left corner of the ribbon to launch the application in a browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-05.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Meet the Fourth Coffee application. This ASP.NET Web Forms e-commerce application shows a menu option of several delectable treats, shows a detailed view for each, and allows the user to place an order. Remember when I said this application was old? Order receipts are setup to use Hotmail, which was retired &lt;a href=&quot;https://www.geekwire.com/2012/farewell-hotmail-microsoft-rolling-outlook-webmail-service/&quot;&gt;back in 2012&lt;/a&gt; for Outlook.com. Check out &lt;code class=&quot;highlighter-rouge&quot;&gt;Order.cshtml&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-06.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the application generated and running, let’s setup a Visual Studio solution for easier management.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Application files should be located at &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Users\&amp;lt;your username&amp;gt;\Documents\My Web Sites&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;configure-the-application-for-visual-studio&quot;&gt;Configure the application for Visual Studio&lt;/h2&gt;

&lt;p&gt;Web Matrix includes a nifty feature to auto-generate a Visual Studio solution from our code, making it easier to manage our Bakery application in a modern (and supported) IDE. In Web Matrix, click &lt;strong&gt;Visual Studio&lt;/strong&gt; from the ribbon bar.&lt;/p&gt;

&lt;p&gt;I have &lt;a href=&quot;https://www.visualstudio.com/vs/community/&quot;&gt;Visual Studio 2017 Community&lt;/a&gt; edition installed, but any recent-ish version of VS should work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-07.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Visual Studio then opens, with a VS Solution and Project generated with our code. Hit &lt;strong&gt;F5&lt;/strong&gt; to enter debug mode, and you should see the same web application in the browser as before.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-08.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In File Explorer, we have a bit of a mismatch. Our original files are located at &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Users\&amp;lt;your username&amp;gt;\Documents\My Web Sites&lt;/code&gt;, but our VS Solution is located at &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Users\&amp;lt;your username&amp;gt;\Documents\WebMatrix Solutions\Projects&lt;/code&gt;. Plus, the project generated by VS wasn’t a formal Web Application project, which will impact how easily we can take advtange of tooling in a later step.&lt;/p&gt;

&lt;p&gt;Instead of relying on this autogenerated VS Solution, let’s backup and create our own new solution and copy over the files. This will ensure we have all solution files in a single folder on our hardrive, and make it easier to manage the web application going forward.&lt;/p&gt;

&lt;p&gt;Close the open Solution in Visual Studio by selecting &lt;strong&gt;File&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Close&lt;/strong&gt;. Then select &lt;strong&gt;File&lt;/strong&gt; -&amp;gt; &lt;strong&gt;New Project&lt;/strong&gt;, naming the Solution &lt;strong&gt;Bakery&lt;/strong&gt; and selecting the &lt;strong&gt;ASP.NET Empty Web Application&lt;/strong&gt; template from the Installed Visual C# web templates.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-09.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Be sure to also select &lt;strong&gt;.NET Framework 4&lt;/strong&gt; from the New Project’s dropdown. This was found from the left-hand navigation bar of &lt;strong&gt;Site&lt;/strong&gt; –&amp;gt; &lt;strong&gt;Settings&lt;/strong&gt; –&amp;gt; &lt;strong&gt;Select .NET Version&lt;/strong&gt; to see that it is configured to use .NET 4.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-10.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once Visual Studio scaffolds out our Solution and Project, delete &lt;strong&gt;web.config&lt;/strong&gt; since we have one already created. Then, to import the entirety of our application files, open the Project in Windows Explorer and copy over all of the files from the WebMatrix folder. In my case that meant opening &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Users\steven\Documents\visual studio 2017\Projects\Bakery\WebApplication&lt;/code&gt; and pasting in all files from &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Users\steven\Documents\My Web Sites\Bakery&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once copied into the same directory, we need to let Visual Studio know the files are there. Right click the VS Project and select &lt;strong&gt;Add&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Existing Item&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-11.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then select all items in your Project’s folder (except for the existing &lt;code class=&quot;highlighter-rouge&quot;&gt;.csproj&lt;/code&gt; Project FIle) and select &lt;strong&gt;Add&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-12.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now in Visual Studio, all files are present. Hit &lt;strong&gt;F5&lt;/strong&gt; to again ensure that the Web Application loads as expected in a browser window.&lt;/p&gt;

&lt;p&gt;That bit of roundabout VS kung-fu will make our lives easier over the longterm, and reflects the evolution of the VS tooling over the past decade. With our application all setup in a VS Solution, let’s get to Dockerizing!&lt;/p&gt;

&lt;h2 id=&quot;docker-ize-the-application&quot;&gt;Docker-ize the Application&lt;/h2&gt;

&lt;p&gt;Now comes the fun part! To wrap our application in a container, we need to first create a Dockerfile. We could create one manually, but since we are using Visual Studio we can take advantage of the &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/publishing/visual-studio-tools-for-docker&quot;&gt;Visual Studio tools for Docker&lt;/a&gt;. Right-click on the WebApplication project, select &lt;strong&gt;Add&lt;/strong&gt;, and click &lt;strong&gt;Docker Support&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-13.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The VS Tools for Docker automatically generate a Dockerfile and series of docker-compose files for us, based on characterisitcs of our application. Notice the green debugging arrow now says “Docker”, as the tooling will now launch our application inside of a Docker container, with a debugger attached. Normally this works flawlessly, however if you hit &lt;strong&gt;F5&lt;/strong&gt; to launch a new debugging session you’ll likely meet this lovely screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-14.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With an error saying:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;System.Data.SqlServerCe.SqlCeException occurred
  HResult=0x80004005
  Message=The file resolves to a path that is too long. The maximum length is 260 characters. [ File name = C:\inetpub\wwwroot\App_Data\bakery.sdf ]
  Source=SQL Server Compact ADO.NET Data Provider
  StackTrace:
&amp;lt;Cannot evaluate the exception stack trace&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“The file resolves to a path that is too long” was a new error for me, and one that I never completely tracked down online. I did, with &lt;a href=&quot;https://blog.sixeyed.com/&quot;&gt;Elton Stoneman&lt;/a&gt;’s help (his new &lt;a href=&quot;https://www.amazon.co.uk/Docker-Windows-Elton-Stoneman-ebook/dp/B0711Y4J9K&quot;&gt;book&lt;/a&gt; is terrific, btw #shamelessplug) find a workaround. Creating a new Web Site with an updated AppPool Identity Type, we can get past the error that I suspect is related to file permissions. To make these edits, we will adjust our Dockerfile.&lt;/p&gt;

&lt;p&gt;Open the Dockerfile that was auto-generated for us by the VS Tools for Docker:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM microsoft/aspnet:4.7
ARG source
WORKDIR /inetpub/wwwroot
COPY ${source:-obj/Docker/publish} .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Update the &lt;strong&gt;Dockerfile&lt;/strong&gt; with a new &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; statement and a fresh, non-IIS default working directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM microsoft/aspnet:4.7
ARG source
WORKDIR /web-app
RUN Remove-Website -Name 'Default Web Site'; \ 
    Set-ItemProperty IIS:\AppPools\DefaultAppPool -Name processModel.identityType -Value LocalSystem; \
    New-Website -Name 'web-app' -Port 80 -PhysicalPath 'C:\web-app' -ApplicationPool 'DefaultAppPool'
COPY ${source:-obj/Docker/publish} .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To avoid any insertion of the tooling’s debugging system, switch the Configuration to &lt;strong&gt;Release&lt;/strong&gt;, and hit &lt;strong&gt;CTRL-F5&lt;/strong&gt; to “start the application without debugging”. The VS Tools for Docker look to be injecting debugging functionality when the container starts, which conflicts with the aspnet image’s &lt;a href=&quot;https://github.com/Microsoft/aspnet-docker/blob/master/4.7/Dockerfile#L27&quot;&gt;entrypoint&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-15.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Visual Studio will start the application without debugging, and soon in our browser we can see the Bakery application running now on our local host, but in a Windows Container via Docker:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-16.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note the IP address, which we could also get by running the following from a PowerShell window on the host for the specific container:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker inspect &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{{ .NetworkSettings.Networks.nat.IPAddress }}&quot;&lt;/span&gt; &amp;lt;your container name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is likely a more elegant and plain better method for getting past the error experienced earlier, thus regaining the ability to use debugging directly in VS. The Visual Studio Tools for Docker setup a terrific pipeline of functionality, but somehow negatively impacted the permissions of the Bakery application.&lt;/p&gt;

&lt;h1 id=&quot;part-2-the-database&quot;&gt;Part 2: The Database&lt;/h1&gt;

&lt;h2 id=&quot;externalize-the-database&quot;&gt;Externalize the database&lt;/h2&gt;

&lt;p&gt;The Bakery appplication is using &lt;a href=&quot;https://en.wikipedia.org/wiki/SQL_Server_Compact&quot;&gt;Microsoft SQL Server Compact (SQL CE)&lt;/a&gt;, a lightweight RDBMS used for mobile applications and embedded systems (and Web Matrix demo applications, apparently). Since CE was deprecated 4.5+ years ago, the next step I wanted to take with Bakery was to move the database from a single &lt;code class=&quot;highlighter-rouge&quot;&gt;.sdf&lt;/code&gt; file into a full fledged Microsoft SQL Server Developer Edition database. Microsoft publishes an &lt;a href=&quot;https://hub.docker.com/r/microsoft/mssql-server-windows-express/&quot;&gt;official image on Docker Hub&lt;/a&gt;, but first we need to get our existing product catalog migrated.&lt;/p&gt;

&lt;p&gt;Opening SQL Server Management Studio 17, I had expected to be able to migrate my &lt;code class=&quot;highlighter-rouge&quot;&gt;.sdf&lt;/code&gt; database to a format that would work with SQL Server (or at last generate a &lt;code class=&quot;highlighter-rouge&quot;&gt;.sql&lt;/code&gt; file that could reproduce the data). No-go. Turns out the support for SQL CE within SSMS studio was deprecated in SSMS 2008. Isn’t legacy fun? Fortunately, Web Matrix has a feature where an SQL CE file can be exported into a SQL Server Express instance.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are numerous &lt;a href=&quot;http://erikej.blogspot.dk/2009/04/sql-compact-3rd-party-tools.html&quot;&gt;3rd party tools&lt;/a&gt; for getting data out of a SQL CE file if Web Matrix isn’t an option (or just &lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwjmx4eRgurWAhWE7SYKHS_gBqoQFggmMAA&amp;amp;url=https%3A%2F%2Fwww.microsoft.com%2Fen-us%2Fdownload%2Fdetails.aspx%3Fid%3D7593&amp;amp;usg=AOvVaw2_3XRGqDBwqs233EoTgBTa&quot;&gt;download SSMS 2008&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Opening Web Matrix and navigating to &lt;strong&gt;Databases&lt;/strong&gt; from the left navigation, select &lt;strong&gt;bakery.sdf&lt;/strong&gt; and on the ribbon select &lt;strong&gt;Migrate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-17.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: you need SQL Server installed locally for this to work. Express works fine (is what I used)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Adjust Web Matrix’s connection box to use your database credentials. My local SQL Server Express instance uses Windows authentication. Once settings are adjusted, click &lt;strong&gt;OK&lt;/strong&gt; and Web Matrix will automatically migrate the data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-18.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Connecting to the local SQL Server instance via SQL Server Management Studio, I can see a new “bakery” database has been created and all of the data is present.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-19.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-a-sql-project&quot;&gt;Create a SQL Project&lt;/h2&gt;

&lt;p&gt;We have now freed our data from the deprecated world of SQL CE, but how will we get it into a container running SQL Server? For this we’ll setup a SQL Project in Visual Studio, which will help us manage future schema updates in a familiar dev environment and facilitate checkins to a source control system.&lt;/p&gt;

&lt;p&gt;To create the project, right click on the Visual Studio solution, hover on &lt;strong&gt;Add&lt;/strong&gt; and select &lt;strong&gt;New Project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-20.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;SQL Server&lt;/strong&gt; from the left-hand navigation pane, bumping the .NET Framework dropdown back up to a modern &lt;strong&gt;4.6.2&lt;/strong&gt;. Select the &lt;strong&gt;SQL Server Database Project&lt;/strong&gt; template, and name the project &lt;strong&gt;Database&lt;/strong&gt;. Click OK to scaffold out the project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-21.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the project has been created, we need to populate it with schema data. In an earlier step we exported the database data to a local instance of MS SQL Server Express. We can import the data from that local instance into Visual Studio by right clicking the &lt;strong&gt;Database&lt;/strong&gt; project, selecting &lt;strong&gt;Import&lt;/strong&gt; and clicking on &lt;strong&gt;Database&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-22.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the Import Database wizard, we need to configure a connection the local SQL instance. Click &lt;strong&gt;Select Connection&lt;/strong&gt; and configure &lt;strong&gt;Server Name&lt;/strong&gt; to match your local instance. Depending on how you setup SQL, configure Windows or SQL Authentication. Finally, select the &lt;strong&gt;bakery&lt;/strong&gt; database (the DB name that was setup earlier in the SQL instance) and click &lt;strong&gt;Connect&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-23.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Back on the Import Database wizard, click &lt;strong&gt;Start&lt;/strong&gt; to begin the import process and watch the Summary screen complete. Click &lt;strong&gt;Finish&lt;/strong&gt; to close the wizard.&lt;/p&gt;

&lt;p&gt;The Database Project now has a folder named &lt;strong&gt;dbo&lt;/strong&gt;. Expand it and open &lt;strong&gt;Products.sql&lt;/strong&gt;. From the Design View we can see the names of each of the columns for the Products table, representing the schema originally setup in the SQL CE file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-24.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Setting up a formal Visual Studio Project for our SQL Database makes updating schemas a straight forward and structured process.  To use this schema in a Windows container, we will build the Project into a &lt;code class=&quot;highlighter-rouge&quot;&gt;.dacpac&lt;/code&gt; file and import the file into a container.&lt;/p&gt;

&lt;h2 id=&quot;create-a-sql-server-container&quot;&gt;Create a SQL Server Container&lt;/h2&gt;

&lt;p&gt;Microsoft maintains a set of Docker Containers for &lt;a href=&quot;https://hub.docker.com/r/microsoft/mssql-server-linux/&quot;&gt;mssql-server-linx&lt;/a&gt;, &lt;a href=&quot;https://hub.docker.com/r/microsoft/mssql-server-windows-developer/&quot;&gt;mssql-server-windows-developer&lt;/a&gt;, and &lt;a href=&quot;https://hub.docker.com/r/microsoft/mssql-server-windows-express/&quot;&gt;mssql-server-windows-express&lt;/a&gt;, and &lt;a href=&quot;https://hub.docker.com/r/microsoft/mssql-server-windows/&quot;&gt;mssql-server-windows&lt;/a&gt;. These are stock images that will require us to add our own database, schema, and data.&lt;/p&gt;

&lt;p&gt;The preferred approach for managing and deploying SQL Server databases is a &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/relational-databases/data-tier-applications/data-tier-applications&quot;&gt;dacpac&lt;/a&gt;. This file contains a deployment asset that can be instantiated in a variety of ways, and avoids miles of hand-created script files. One of the benefits of moving our database schema into a Visual Studio Project is the ability to generate a dacpac file via a traditional MSBuild process.&lt;/p&gt;

&lt;p&gt;Create a Dockerfile in the &lt;strong&gt;Database&lt;/strong&gt; project. Windows does not like to create files without a file extension (as is customary for Dockerfiles) so one option is to copy/paste from the WebApplication Project into the Database Project. Once your Dockerfile is present, override its contents with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;# escape=`

# ================
# Builder Image
# ================
# Downloads dependencies and compiles the SQL Project
FROM microsoft/windowsservercore:10.0.14393.1715 AS builder
SHELL [&quot;powershell&quot;, &quot;-Command&quot;, &quot;$ErrorActionPreference = 'Stop';&quot;]

# Install Chocolatey for headless installation of MSFT Build tooling
RUN Install-PackageProvider -Name chocolatey -RequiredVersion 2.8.5.130 -Force; `
    Install-Package -Name microsoft-build-tools -RequiredVersion 15.0.26228.0 -Force; `
    Install-Package -Name netfx-4.6.2-devpack -RequiredVersion 4.6.01590.20170129 -Force

# Install Nuget and install Microsoft Data Tools
RUN Install-Package nuget.commandline -RequiredVersion 3.5.0 -Force; `
    &amp;amp; C:\Chocolatey\bin\nuget install Microsoft.Data.Tools.Msbuild -Version 10.0.61708.210

# Add MSBuild to Path for easier usage
ENV MSBUILD_PATH=&quot;C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\MSBuild\15.0\Bin&quot;
RUN $env:PATH = $env:MSBUILD_PATH + ';' + $env:PATH; `
    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine)

# Create a folder in the image and copy over VS Project files
WORKDIR C:\src
COPY . .

# Build project
RUN msbuild Database.sqlproj `
      /p:SQLDBExtensionsRefPath=&quot;C:\Microsoft.Data.Tools.Msbuild.10.0.61708.210\lib\net46&quot; `
      /p:SqlServerRedistPath=&quot;C:\Microsoft.Data.Tools.Msbuild.10.0.61708.210\lib\net46&quot; `
	  /p:Configuration=Release

# ================
# Database Image
# ================
FROM microsoft/mssql-server-windows-express:2017-windowsservercore-10.0.14393.1715
SHELL [&quot;powershell&quot;, &quot;-Command&quot;, &quot;$ErrorActionPreference = 'Stop';&quot;]

RUN Install-PackageProvider -Name chocolatey -RequiredVersion 2.8.5.130 -Force; `
	Install-Package nuget.commandline -RequiredVersion 3.5.0 -Force; `
    &amp;amp; C:\Chocolatey\bin\nuget install Microsoft.Data.Tools.Msbuild -Version 10.0.61708.210; `
	mkdir C:\database

# Copy built dacpac (from earlier build stage) and configuration scripts
WORKDIR C:\init
COPY --from=builder C:\src\bin\Release\Database.dacpac .
COPY Initialize-Database.ps1 .
COPY SampleData.sql .

# Set startup command to initalize the database
CMD ./Initialize-Database.ps1 -sa_password $env:sa_password -Verbose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a far more complex Dockerfile than the Web Application, so let’s break down what’s happening:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Two “stages” are being used in our &lt;a href=&quot;https://docs.docker.com/engine/userguide/eng-image/multistage-build/&quot;&gt;“multi-stage build”&lt;/a&gt;. The first is named “builder” and is responsible for building the Database Project into a resulting &lt;code class=&quot;highlighter-rouge&quot;&gt;.dacpac&lt;/code&gt; file. This stage begins with the Windows Server Core Image, installs several msbuild dependencies from Choclatey and NuGet, copies the source project into the container, and then executes a msbuild on the Project files.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The second “production” stage starts with a MS SQL Server Express image and deploys the dacpac into a new database. This is done by installing the Microsoft Data Tools necessary for dacpac deployment, copying the &lt;code class=&quot;highlighter-rouge&quot;&gt;.dacpac&lt;/code&gt; file from the previous stage, and executing the deployment via the &lt;code class=&quot;highlighter-rouge&quot;&gt;Initialize-Database.ps1&lt;/code&gt; script file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;By splitting our build into two stages, we were able to keep the size of our image down. Had we shoved the entire build process into a single stage, the “production” image would have numerous msbuild dependencies that are unnecssary. Using two stages allows us to scrap the intermediary builder files as soon as we have the &lt;code class=&quot;highlighter-rouge&quot;&gt;.dacpac&lt;/code&gt; file needed for database deployment.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Dockerfile references a few files that need to be present in our Project for the &lt;strong&gt;COPY&lt;/strong&gt; statements to work. In the Database Project, create a new file for &lt;code class=&quot;highlighter-rouge&quot;&gt;Initialize-Database.ps1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SampleData.sql&lt;/code&gt;, then paste in the contents:&lt;/p&gt;

&lt;p&gt;Initialize-Database.ps1:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c1&quot;&gt;# Adapted from Microsoft's SQL Server Express sample:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# https://github.com/Microsoft/sql-server-samples/blob/master/samples/manage/windows-containers/mssql-server-2016-express-windows/start.ps1&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# And Docker Labs' SQL Server Lab&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# https://github.com/docker/labs/tree/master/windows/sql-server&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Parameter&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Mandatory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sa_password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Start the service&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;Write-Verbose&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Starting SQL Server'&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;Start-Service &lt;/span&gt;MSSQL&lt;span class=&quot;se&quot;&gt;`$&lt;/span&gt;SQLEXPRESS

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sa_password&lt;/span&gt; -ne &lt;span class=&quot;s2&quot;&gt;&quot;_&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;Write-Verbose&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Changing SA login credentials'&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$sqlcmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ALTER LOGIN sa with password='&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sa_password&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'; ALTER LOGIN sa ENABLE;&quot;&lt;/span&gt;
      Invoke-Sqlcmd -Query &lt;span class=&quot;nv&quot;&gt;$sqlcmd&lt;/span&gt; -ServerInstance &lt;span class=&quot;s2&quot;&gt;&quot;.\SQLEXPRESS&quot;&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Attach data files if they exist: &lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$mdfPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'c:\database\BakeryDB_Primary.mdf'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Test-Path&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mdfPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; -eq &lt;span class=&quot;nv&quot;&gt;$true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$sqlcmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CREATE DATABASE BakeryDB ON (FILENAME = N'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mdfPath&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;')&quot;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$ldfPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'c:\database\BakeryDB_Primary.ldf'&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Test-Path&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mdfPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; -eq &lt;span class=&quot;nv&quot;&gt;$true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;$sqlcmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sqlcmd&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, (FILENAME = N'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ldfPath&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;')&quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$sqlcmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sqlcmd&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; FOR ATTACH;&quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;Write-Verbose&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Invoke-Sqlcmd -Query &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sqlcmd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -ServerInstance '.\SQLEXPRESS'&quot;&lt;/span&gt;
      Invoke-Sqlcmd -Query &lt;span class=&quot;nv&quot;&gt;$sqlcmd&lt;/span&gt; -ServerInstance &lt;span class=&quot;s2&quot;&gt;&quot;.\SQLEXPRESS&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Deploy or upgrade the database:&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$SqlPackagePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'C:\Microsoft.Data.Tools.Msbuild.10.0.61708.210\lib\net46\SqlPackage.exe'&lt;/span&gt;
  &amp;amp; &lt;span class=&quot;nv&quot;&gt;$SqlPackagePath&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;`&lt;/span&gt;
    /sf:Database.dacpac &lt;span class=&quot;se&quot;&gt;`&lt;/span&gt;
    /a:Script &lt;span class=&quot;se&quot;&gt;`&lt;/span&gt;
    /op:create.sql &lt;span class=&quot;se&quot;&gt;`&lt;/span&gt;
    /p:CommentOutSetVarDeclarations&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;`&lt;/span&gt;
    /tsn:.\SQLEXPRESS &lt;span class=&quot;se&quot;&gt;`&lt;/span&gt;
    /tdn:BakeryDB &lt;span class=&quot;se&quot;&gt;`&lt;/span&gt;
    /tu:sa &lt;span class=&quot;se&quot;&gt;`&lt;/span&gt;
    /tp:&lt;span class=&quot;nv&quot;&gt;$sa_password&lt;/span&gt; 

&lt;span class=&quot;nv&quot;&gt;$SqlCmdVars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DatabaseName=BakeryDB&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;DefaultFilePrefix=BakeryDB&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;DefaultDataPath=c:\database\&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;DefaultLogPath=c:\database\&quot;&lt;/span&gt;  
Invoke-Sqlcmd -InputFile create.sql -Variable &lt;span class=&quot;nv&quot;&gt;$SqlCmdVars&lt;/span&gt; -Verbose
&lt;span class=&quot;nb&quot;&gt;Write-Verbose&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Deployed dacpac&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Insert sample data&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Write-Verbose&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Inserting Sample Data&quot;&lt;/span&gt;
Invoke-Sqlcmd -InputFile .\SampleData.sql -ServerInstance .\SQLEXPRESS

&lt;span class=&quot;c1&quot;&gt;# Relay SQL event logs to Docker&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$lastCheck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Get-Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.AddSeconds&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;nb&quot;&gt;Get-EventLog&lt;/span&gt; -LogName Application -Source &lt;span class=&quot;s2&quot;&gt;&quot;MSSQL*&quot;&lt;/span&gt; -After &lt;span class=&quot;nv&quot;&gt;$lastCheck&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;Select-Object &lt;/span&gt;TimeGenerated, EntryType, Message	 
      &lt;span class=&quot;nv&quot;&gt;$lastCheck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Get-Date 
      Start-Sleep&lt;/span&gt; -Seconds 2 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SampleData.sql:&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BakeryDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ImageName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Carrot Cake'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'A scrumptious mini-carrot cake encrusted with sliced almonds'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'carrot_cake.jpg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Lemon Tart'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'A delicious lemon tart with fresh meringue cooked to perfection'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'lemon_tart.jpg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Cupcakes'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Delectable vanilla and chocolate cupcakes'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cupcakes.jpg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Bread'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Fresh baked French-style bread'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bread.jpg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Pear Tart'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'A glazed pear tart topped with sliced almonds and a dash of cinnamon'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'pear_tart.jpg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Chocolate Cake'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Rich chocolate frosting cover this chocolate lover’s dream.'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'chocolate_cake.jpg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;SampleData.sql&lt;/strong&gt; needs one additional piece of configuration. Since this is a SQL Project it will try to build the file as part of MSBuild. We are only using it to provide sample data after the .dacpac has been restored, so to disable this default build behavior right click on the file and click &lt;strong&gt;Properties&lt;/strong&gt;. From the Properties window, toggle the &lt;strong&gt;Build Action&lt;/strong&gt; to &lt;strong&gt;None&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-25.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With out Dockerfile and supporting files created in the VS Project, open a PowerShell window and build the file from the &lt;code class=&quot;highlighter-rouge&quot;&gt;./Bakery/Database&lt;/code&gt; directory.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; bakery:database &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-26.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the build completes, test the database locally by running&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; dbtest &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 1433:1433 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ACCEPT_EULA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;y &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sa_password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Docker123 bakery:database
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-it&lt;/code&gt; flag runs the container in interactive mode. This allows us to see the output right inline with our terminal. You should see the database initialization script fire up to restore the database and insert sample data per our Dockerfile’s &lt;strong&gt;CMD&lt;/strong&gt; statement. Once the sample data has been inserted, open a second powershell window to get the ip address of the container.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker inspect &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{{ .NetworkSettings.Networks.nat.IPAddress }}&quot;&lt;/span&gt; dbtest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Plug the IP address into SQL Server Management Studio with username &lt;strong&gt;sa&lt;/strong&gt; and password &lt;strong&gt;Docker123&lt;/strong&gt; to verify that the BakeryDB and Products table sample data was successfully generated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-27.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have now created a dedicated SQL Server container complete with a database, products table, and sample data from the original SQL CE content. The final step will be tying the database to the web application.&lt;/p&gt;

&lt;h1 id=&quot;part-3-connecting-the-web-application-and-database&quot;&gt;Part 3: Connecting the Web Application and Database&lt;/h1&gt;

&lt;p&gt;In Part 1 we containerized a web application, including its App_Data folder holding a SQL CE database. In Part 2 we moved that database to its own dedicated container, but the Web Application is currently unaware of such a momentous activity. To plumb these two steps together, we will update the existing &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&quot;extend-docker-compose&quot;&gt;Extend Docker Compose&lt;/h2&gt;

&lt;p&gt;When we last left the humble &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file, we had finished Part 1. Compose files exist to organize multiple application components or tiers into a single deployable unit. We can manage the lifecycle of the Bakery workload with a single file, rather than juggling separate webapplication and database scripts. Since we only had a web application, the yaml file only consisted of 1 defined Service. To extend this file with our database, update the file with an additional &lt;strong&gt;database&lt;/strong&gt; service:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3'&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;webapplication&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;webapplication&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.\WebApplication&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Dockerfile&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;database&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;database&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.\Database&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Dockerfile&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ACCEPT_EULA=Y&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sa_password=Docker123&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have also defined a dependency between the webapplication tier and loaded the environment variables that we previously defined during a &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With the web application talking to a separate container, we need to define a Connection String for the client. Opening &lt;code class=&quot;highlighter-rouge&quot;&gt;web.config&lt;/code&gt;, paste in the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;connectionStrings&amp;gt;&lt;/code&gt; block into &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;connectionStrings&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;connectionString=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Data Source=database,1433;Initial Catalog=BakeryDB;User ID=sa;Password=Docker123&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bakery&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;providerName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Data.SqlClient&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/connectionStrings&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;system.web&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;compilation&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;debug=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;targetFramework=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4.0&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;customErrors&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Off&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/system.web&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;system.data&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;DbProviderFactories&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;remove&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;invariant=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Data.SqlServerCe.4.0&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;invariant=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Data.SqlServerCe.4.0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Microsoft® SQL Server® Compact 4.0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.NET Framework Data Provider for Microsoft SQL Server Compact&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Data.SqlServerCe.SqlCeProviderFactory, System.Data.SqlServerCe, Version=4.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/DbProviderFactories&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/system.data&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; the same name as the “bakery” &lt;code class=&quot;highlighter-rouge&quot;&gt;.sdf&lt;/code&gt; file previously used as the database. By using the same name we can avoid re-coding each of our pages’ SQL queries.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Data Source&lt;/code&gt; is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;database&lt;/code&gt;, which is the name of the Service that is defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file. Docker’s builtin DNS will resolve the database name for us.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Putting a password directly into the Connection String isn’t optimal, and in a future post we’ll explore the use of &lt;a href=&quot;https://docs.docker.com/engine/swarm/secrets/&quot;&gt;Docker Secrets&lt;/a&gt; for handling sensitive information.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-up-bakery&quot;&gt;What’s up, Bakery&lt;/h2&gt;

&lt;p&gt;With the docker-compose file polished up we can launch both Services with a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt; from the root of the VS Solution directory. However, since we’ve been thrashing around with many builds, let’s force a rebuild for the images as the Bakery solution starts up. Feel free to tidy up by removing all running containers and running a &lt;code class=&quot;highlighter-rouge&quot;&gt;docker system prune -f&lt;/code&gt; to remove dangling images and volumes.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that the VS Tools for Docker setup several compose files, which we can stack with multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; flags.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; .&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;ocker-compose.yml &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; .&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;ocker-compose.override.yml up &lt;span class=&quot;nt&quot;&gt;--build&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--force-recreate&lt;/span&gt;

docker inspect &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{{ .NetworkSettings.Networks.nat.IPAddress }}&quot;&lt;/span&gt; bakery_webapplication_1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the IP address from the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker inspect&lt;/code&gt; statement, open the running Web Application in a browser tab. At this point we could likely delete the entire &lt;code class=&quot;highlighter-rouge&quot;&gt;.sdf&lt;/code&gt; file from the solution, but as a sanity check I grabbed the IP address for the database (also via &lt;code class=&quot;highlighter-rouge&quot;&gt;docker inspect&lt;/code&gt;) and used SSMS to add a row called “Brownie”. Refreshing the browser shows the new product alongside its peers as expected.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/10/webmatrix-28.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;/h1&gt;

&lt;p&gt;Whew! That was fun! We have successfully taken a nearly decade-old application and moved each of its two tiers into a container. In doing so we used multi-stage builds, the Visual Studio Tools for Docker, and Docker Store images from Microsoft. Our Visual Studio solution can now be checked into source control, with a continuous integration system regularly compiling any changes into a new set of images. The portability of such container images allows us to move the application from a legacy Windows Server 2003 or 2008 environment to Windows Server 2016, helping to retire antiquated systems.&lt;/p&gt;

&lt;p&gt;For more information, please see the &lt;a href=&quot;https://github.com/docker/labs/tree/master/windows/sql-server&quot;&gt;SQL Server Lab&lt;/a&gt; on GitHub, which heavily influenced this post.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</content><author><name></name></author><summary type="html">Web Matrix is a code editor that has been around for a very long time and will [sadly] reach end of life on November 1, 2017. In honor of this sad day, I wanted to take one of Web Matrix’s starter applications, and generate a Docker File for it. Why? The sample applications within Web Matrix are old. These 5+ year old web applications pre-date modern MVC patterns and technology, but are representative of legacy applications that enterprises struggle to maintain today. By moving a legacy application into a Docker container, we can move the application to run on a modern infrastructure (Server 2016, Azure, etc.), make deployments far easier via a CI/CD pipeline, and decrease the inherent attack surface. Pre-Requisites Docker for Windows Visual Studio 2017 Community Edition (or similar) SQL Server Express (or better) running locally Install Web Matrix Web Matrix 3.0 can be installed via the Web Platform Installer. Download the WP installer and run the setup program. Any dependencies needed will be automatically downloaded as part of the process (nifty!). After installing, start the Web Matrix application. Part 1: The Web Application Create a sample Bakery application When Web Matrix is first started, you are greeted with a few options. For our purposes today, select New and Template Gallery. The Template Gallery contains several options. Select the Bakery template tile, and name the site Bakery. Feel free to try this same exercise with the Photo Gallery or Personal Site templates Once selected, Web Matrix will download the source files for the application from the internet and pull down any dependencies. Once the solution is visible, click Run from the top left corner of the ribbon to launch the application in a browser. Meet the Fourth Coffee application. This ASP.NET Web Forms e-commerce application shows a menu option of several delectable treats, shows a detailed view for each, and allows the user to place an order. Remember when I said this application was old? Order receipts are setup to use Hotmail, which was retired back in 2012 for Outlook.com. Check out Order.cshtml: With the application generated and running, let’s setup a Visual Studio solution for easier management. Application files should be located at C:\Users\&amp;lt;your username&amp;gt;\Documents\My Web Sites Configure the application for Visual Studio Web Matrix includes a nifty feature to auto-generate a Visual Studio solution from our code, making it easier to manage our Bakery application in a modern (and supported) IDE. In Web Matrix, click Visual Studio from the ribbon bar. I have Visual Studio 2017 Community edition installed, but any recent-ish version of VS should work. Visual Studio then opens, with a VS Solution and Project generated with our code. Hit F5 to enter debug mode, and you should see the same web application in the browser as before. In File Explorer, we have a bit of a mismatch. Our original files are located at C:\Users\&amp;lt;your username&amp;gt;\Documents\My Web Sites, but our VS Solution is located at C:\Users\&amp;lt;your username&amp;gt;\Documents\WebMatrix Solutions\Projects. Plus, the project generated by VS wasn’t a formal Web Application project, which will impact how easily we can take advtange of tooling in a later step. Instead of relying on this autogenerated VS Solution, let’s backup and create our own new solution and copy over the files. This will ensure we have all solution files in a single folder on our hardrive, and make it easier to manage the web application going forward. Close the open Solution in Visual Studio by selecting File -&amp;gt; Close. Then select File -&amp;gt; New Project, naming the Solution Bakery and selecting the ASP.NET Empty Web Application template from the Installed Visual C# web templates. Be sure to also select .NET Framework 4 from the New Project’s dropdown. This was found from the left-hand navigation bar of Site –&amp;gt; Settings –&amp;gt; Select .NET Version to see that it is configured to use .NET 4. Once Visual Studio scaffolds out our Solution and Project, delete web.config since we have one already created. Then, to import the entirety of our application files, open the Project in Windows Explorer and copy over all of the files from the WebMatrix folder. In my case that meant opening C:\Users\steven\Documents\visual studio 2017\Projects\Bakery\WebApplication and pasting in all files from C:\Users\steven\Documents\My Web Sites\Bakery. Once copied into the same directory, we need to let Visual Studio know the files are there. Right click the VS Project and select Add -&amp;gt; Existing Item Then select all items in your Project’s folder (except for the existing .csproj Project FIle) and select Add. Now in Visual Studio, all files are present. Hit F5 to again ensure that the Web Application loads as expected in a browser window. That bit of roundabout VS kung-fu will make our lives easier over the longterm, and reflects the evolution of the VS tooling over the past decade. With our application all setup in a VS Solution, let’s get to Dockerizing! Docker-ize the Application Now comes the fun part! To wrap our application in a container, we need to first create a Dockerfile. We could create one manually, but since we are using Visual Studio we can take advantage of the Visual Studio tools for Docker. Right-click on the WebApplication project, select Add, and click Docker Support. The VS Tools for Docker automatically generate a Dockerfile and series of docker-compose files for us, based on characterisitcs of our application. Notice the green debugging arrow now says “Docker”, as the tooling will now launch our application inside of a Docker container, with a debugger attached. Normally this works flawlessly, however if you hit F5 to launch a new debugging session you’ll likely meet this lovely screen: With an error saying: System.Data.SqlServerCe.SqlCeException occurred HResult=0x80004005 Message=The file resolves to a path that is too long. The maximum length is 260 characters. [ File name = C:\inetpub\wwwroot\App_Data\bakery.sdf ] Source=SQL Server Compact ADO.NET Data Provider StackTrace: &amp;lt;Cannot evaluate the exception stack trace&amp;gt; “The file resolves to a path that is too long” was a new error for me, and one that I never completely tracked down online. I did, with Elton Stoneman’s help (his new book is terrific, btw #shamelessplug) find a workaround. Creating a new Web Site with an updated AppPool Identity Type, we can get past the error that I suspect is related to file permissions. To make these edits, we will adjust our Dockerfile. Open the Dockerfile that was auto-generated for us by the VS Tools for Docker: FROM microsoft/aspnet:4.7 ARG source WORKDIR /inetpub/wwwroot COPY ${source:-obj/Docker/publish} . Update the Dockerfile with a new RUN statement and a fresh, non-IIS default working directory: FROM microsoft/aspnet:4.7 ARG source WORKDIR /web-app RUN Remove-Website -Name 'Default Web Site'; \ Set-ItemProperty IIS:\AppPools\DefaultAppPool -Name processModel.identityType -Value LocalSystem; \ New-Website -Name 'web-app' -Port 80 -PhysicalPath 'C:\web-app' -ApplicationPool 'DefaultAppPool' COPY ${source:-obj/Docker/publish} . To avoid any insertion of the tooling’s debugging system, switch the Configuration to Release, and hit CTRL-F5 to “start the application without debugging”. The VS Tools for Docker look to be injecting debugging functionality when the container starts, which conflicts with the aspnet image’s entrypoint. Visual Studio will start the application without debugging, and soon in our browser we can see the Bakery application running now on our local host, but in a Windows Container via Docker: Note the IP address, which we could also get by running the following from a PowerShell window on the host for the specific container: docker inspect -f &quot;{{ .NetworkSettings.Networks.nat.IPAddress }}&quot; &amp;lt;your container name&amp;gt; There is likely a more elegant and plain better method for getting past the error experienced earlier, thus regaining the ability to use debugging directly in VS. The Visual Studio Tools for Docker setup a terrific pipeline of functionality, but somehow negatively impacted the permissions of the Bakery application. Part 2: The Database Externalize the database The Bakery appplication is using Microsoft SQL Server Compact (SQL CE), a lightweight RDBMS used for mobile applications and embedded systems (and Web Matrix demo applications, apparently). Since CE was deprecated 4.5+ years ago, the next step I wanted to take with Bakery was to move the database from a single .sdf file into a full fledged Microsoft SQL Server Developer Edition database. Microsoft publishes an official image on Docker Hub, but first we need to get our existing product catalog migrated. Opening SQL Server Management Studio 17, I had expected to be able to migrate my .sdf database to a format that would work with SQL Server (or at last generate a .sql file that could reproduce the data). No-go. Turns out the support for SQL CE within SSMS studio was deprecated in SSMS 2008. Isn’t legacy fun? Fortunately, Web Matrix has a feature where an SQL CE file can be exported into a SQL Server Express instance. There are numerous 3rd party tools for getting data out of a SQL CE file if Web Matrix isn’t an option (or just download SSMS 2008) Opening Web Matrix and navigating to Databases from the left navigation, select bakery.sdf and on the ribbon select Migrate Note: you need SQL Server installed locally for this to work. Express works fine (is what I used) Adjust Web Matrix’s connection box to use your database credentials. My local SQL Server Express instance uses Windows authentication. Once settings are adjusted, click OK and Web Matrix will automatically migrate the data. Connecting to the local SQL Server instance via SQL Server Management Studio, I can see a new “bakery” database has been created and all of the data is present. Create a SQL Project We have now freed our data from the deprecated world of SQL CE, but how will we get it into a container running SQL Server? For this we’ll setup a SQL Project in Visual Studio, which will help us manage future schema updates in a familiar dev environment and facilitate checkins to a source control system. To create the project, right click on the Visual Studio solution, hover on Add and select New Project Select SQL Server from the left-hand navigation pane, bumping the .NET Framework dropdown back up to a modern 4.6.2. Select the SQL Server Database Project template, and name the project Database. Click OK to scaffold out the project. Once the project has been created, we need to populate it with schema data. In an earlier step we exported the database data to a local instance of MS SQL Server Express. We can import the data from that local instance into Visual Studio by right clicking the Database project, selecting Import and clicking on Database. In the Import Database wizard, we need to configure a connection the local SQL instance. Click Select Connection and configure Server Name to match your local instance. Depending on how you setup SQL, configure Windows or SQL Authentication. Finally, select the bakery database (the DB name that was setup earlier in the SQL instance) and click Connect. Back on the Import Database wizard, click Start to begin the import process and watch the Summary screen complete. Click Finish to close the wizard. The Database Project now has a folder named dbo. Expand it and open Products.sql. From the Design View we can see the names of each of the columns for the Products table, representing the schema originally setup in the SQL CE file. Setting up a formal Visual Studio Project for our SQL Database makes updating schemas a straight forward and structured process. To use this schema in a Windows container, we will build the Project into a .dacpac file and import the file into a container. Create a SQL Server Container Microsoft maintains a set of Docker Containers for mssql-server-linx, mssql-server-windows-developer, and mssql-server-windows-express, and mssql-server-windows. These are stock images that will require us to add our own database, schema, and data. The preferred approach for managing and deploying SQL Server databases is a dacpac. This file contains a deployment asset that can be instantiated in a variety of ways, and avoids miles of hand-created script files. One of the benefits of moving our database schema into a Visual Studio Project is the ability to generate a dacpac file via a traditional MSBuild process. Create a Dockerfile in the Database project. Windows does not like to create files without a file extension (as is customary for Dockerfiles) so one option is to copy/paste from the WebApplication Project into the Database Project. Once your Dockerfile is present, override its contents with the following: # escape=` # ================ # Builder Image # ================ # Downloads dependencies and compiles the SQL Project FROM microsoft/windowsservercore:10.0.14393.1715 AS builder SHELL [&quot;powershell&quot;, &quot;-Command&quot;, &quot;$ErrorActionPreference = 'Stop';&quot;] # Install Chocolatey for headless installation of MSFT Build tooling RUN Install-PackageProvider -Name chocolatey -RequiredVersion 2.8.5.130 -Force; ` Install-Package -Name microsoft-build-tools -RequiredVersion 15.0.26228.0 -Force; ` Install-Package -Name netfx-4.6.2-devpack -RequiredVersion 4.6.01590.20170129 -Force # Install Nuget and install Microsoft Data Tools RUN Install-Package nuget.commandline -RequiredVersion 3.5.0 -Force; ` &amp;amp; C:\Chocolatey\bin\nuget install Microsoft.Data.Tools.Msbuild -Version 10.0.61708.210 # Add MSBuild to Path for easier usage ENV MSBUILD_PATH=&quot;C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\MSBuild\15.0\Bin&quot; RUN $env:PATH = $env:MSBUILD_PATH + ';' + $env:PATH; ` [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine) # Create a folder in the image and copy over VS Project files WORKDIR C:\src COPY . . # Build project RUN msbuild Database.sqlproj ` /p:SQLDBExtensionsRefPath=&quot;C:\Microsoft.Data.Tools.Msbuild.10.0.61708.210\lib\net46&quot; ` /p:SqlServerRedistPath=&quot;C:\Microsoft.Data.Tools.Msbuild.10.0.61708.210\lib\net46&quot; ` /p:Configuration=Release # ================ # Database Image # ================ FROM microsoft/mssql-server-windows-express:2017-windowsservercore-10.0.14393.1715 SHELL [&quot;powershell&quot;, &quot;-Command&quot;, &quot;$ErrorActionPreference = 'Stop';&quot;] RUN Install-PackageProvider -Name chocolatey -RequiredVersion 2.8.5.130 -Force; ` Install-Package nuget.commandline -RequiredVersion 3.5.0 -Force; ` &amp;amp; C:\Chocolatey\bin\nuget install Microsoft.Data.Tools.Msbuild -Version 10.0.61708.210; ` mkdir C:\database # Copy built dacpac (from earlier build stage) and configuration scripts WORKDIR C:\init COPY --from=builder C:\src\bin\Release\Database.dacpac . COPY Initialize-Database.ps1 . COPY SampleData.sql . # Set startup command to initalize the database CMD ./Initialize-Database.ps1 -sa_password $env:sa_password -Verbose This is a far more complex Dockerfile than the Web Application, so let’s break down what’s happening: Two “stages” are being used in our “multi-stage build”. The first is named “builder” and is responsible for building the Database Project into a resulting .dacpac file. This stage begins with the Windows Server Core Image, installs several msbuild dependencies from Choclatey and NuGet, copies the source project into the container, and then executes a msbuild on the Project files. The second “production” stage starts with a MS SQL Server Express image and deploys the dacpac into a new database. This is done by installing the Microsoft Data Tools necessary for dacpac deployment, copying the .dacpac file from the previous stage, and executing the deployment via the Initialize-Database.ps1 script file. By splitting our build into two stages, we were able to keep the size of our image down. Had we shoved the entire build process into a single stage, the “production” image would have numerous msbuild dependencies that are unnecssary. Using two stages allows us to scrap the intermediary builder files as soon as we have the .dacpac file needed for database deployment. The Dockerfile references a few files that need to be present in our Project for the COPY statements to work. In the Database Project, create a new file for Initialize-Database.ps1 and SampleData.sql, then paste in the contents: Initialize-Database.ps1: # Adapted from Microsoft's SQL Server Express sample: # https://github.com/Microsoft/sql-server-samples/blob/master/samples/manage/windows-containers/mssql-server-2016-express-windows/start.ps1 # And Docker Labs' SQL Server Lab # https://github.com/docker/labs/tree/master/windows/sql-server param( [Parameter(Mandatory=$false)] [string]$sa_password) # Start the service Write-Verbose 'Starting SQL Server' Start-Service MSSQL`$SQLEXPRESS if ($sa_password -ne &quot;_&quot;) { Write-Verbose 'Changing SA login credentials' $sqlcmd = &quot;ALTER LOGIN sa with password='$sa_password'; ALTER LOGIN sa ENABLE;&quot; Invoke-Sqlcmd -Query $sqlcmd -ServerInstance &quot;.\SQLEXPRESS&quot; } # Attach data files if they exist: $mdfPath = 'c:\database\BakeryDB_Primary.mdf' if ((Test-Path $mdfPath) -eq $true) { $sqlcmd = &quot;CREATE DATABASE BakeryDB ON (FILENAME = N'$mdfPath')&quot; $ldfPath = 'c:\database\BakeryDB_Primary.ldf' if ((Test-Path $mdfPath) -eq $true) { $sqlcmd = &quot;$sqlcmd, (FILENAME = N'$ldfPath')&quot; } $sqlcmd = &quot;$sqlcmd FOR ATTACH;&quot; Write-Verbose &quot;Invoke-Sqlcmd -Query $($sqlcmd) -ServerInstance '.\SQLEXPRESS'&quot; Invoke-Sqlcmd -Query $sqlcmd -ServerInstance &quot;.\SQLEXPRESS&quot; } # Deploy or upgrade the database: $SqlPackagePath = 'C:\Microsoft.Data.Tools.Msbuild.10.0.61708.210\lib\net46\SqlPackage.exe' &amp;amp; $SqlPackagePath ` /sf:Database.dacpac ` /a:Script ` /op:create.sql ` /p:CommentOutSetVarDeclarations=true ` /tsn:.\SQLEXPRESS ` /tdn:BakeryDB ` /tu:sa ` /tp:$sa_password $SqlCmdVars = &quot;DatabaseName=BakeryDB&quot;, &quot;DefaultFilePrefix=BakeryDB&quot;, &quot;DefaultDataPath=c:\database\&quot;, &quot;DefaultLogPath=c:\database\&quot; Invoke-Sqlcmd -InputFile create.sql -Variable $SqlCmdVars -Verbose Write-Verbose &quot;Deployed dacpac&quot; # Insert sample data Write-Verbose &quot;Inserting Sample Data&quot; Invoke-Sqlcmd -InputFile .\SampleData.sql -ServerInstance .\SQLEXPRESS # Relay SQL event logs to Docker $lastCheck = (Get-Date).AddSeconds(-2) while ($true) { Get-EventLog -LogName Application -Source &quot;MSSQL*&quot; -After $lastCheck | Select-Object TimeGenerated, EntryType, Message $lastCheck = Get-Date Start-Sleep -Seconds 2 } SampleData.sql: USE [BakeryDB] GO INSERT INTO [dbo].[Products] ([Name] ,[Description] ,[Price] ,[ImageName]) VALUES ('Carrot Cake' ,'A scrumptious mini-carrot cake encrusted with sliced almonds' ,8.99 ,'carrot_cake.jpg'), ('Lemon Tart' ,'A delicious lemon tart with fresh meringue cooked to perfection' ,9.99 ,'lemon_tart.jpg'), ('Cupcakes' ,'Delectable vanilla and chocolate cupcakes' ,5.99 ,'cupcakes.jpg'), ('Bread' ,'Fresh baked French-style bread' ,1.49 ,'bread.jpg'), ('Pear Tart' ,'A glazed pear tart topped with sliced almonds and a dash of cinnamon' ,5.99 ,'pear_tart.jpg'), ('Chocolate Cake' ,'Rich chocolate frosting cover this chocolate lover’s dream.' ,8.99 ,'chocolate_cake.jpg') GO The SampleData.sql needs one additional piece of configuration. Since this is a SQL Project it will try to build the file as part of MSBuild. We are only using it to provide sample data after the .dacpac has been restored, so to disable this default build behavior right click on the file and click Properties. From the Properties window, toggle the Build Action to None. With out Dockerfile and supporting files created in the VS Project, open a PowerShell window and build the file from the ./Bakery/Database directory. docker build -t bakery:database . Once the build completes, test the database locally by running docker run --name dbtest -it --rm -p 1433:1433 -e ACCEPT_EULA=y -e sa_password=Docker123 bakery:database Using docker run with the -it flag runs the container in interactive mode. This allows us to see the output right inline with our terminal. You should see the database initialization script fire up to restore the database and insert sample data per our Dockerfile’s CMD statement. Once the sample data has been inserted, open a second powershell window to get the ip address of the container. docker inspect -f &quot;{{ .NetworkSettings.Networks.nat.IPAddress }}&quot; dbtest Plug the IP address into SQL Server Management Studio with username sa and password Docker123 to verify that the BakeryDB and Products table sample data was successfully generated. We have now created a dedicated SQL Server container complete with a database, products table, and sample data from the original SQL CE content. The final step will be tying the database to the web application. Part 3: Connecting the Web Application and Database In Part 1 we containerized a web application, including its App_Data folder holding a SQL CE database. In Part 2 we moved that database to its own dedicated container, but the Web Application is currently unaware of such a momentous activity. To plumb these two steps together, we will update the existing docker-compose.yml file. Extend Docker Compose When we last left the humble docker-compose.yml file, we had finished Part 1. Compose files exist to organize multiple application components or tiers into a single deployable unit. We can manage the lifecycle of the Bakery workload with a single file, rather than juggling separate webapplication and database scripts. Since we only had a web application, the yaml file only consisted of 1 defined Service. To extend this file with our database, update the file with an additional database service: version: '3' services: webapplication: image: webapplication build: context: .\WebApplication dockerfile: Dockerfile depends_on: - database database: image: database build: context: .\Database dockerfile: Dockerfile environment: - ACCEPT_EULA=Y - sa_password=Docker123 We have also defined a dependency between the webapplication tier and loaded the environment variables that we previously defined during a docker run. With the web application talking to a separate container, we need to define a Connection String for the client. Opening web.config, paste in the &amp;lt;connectionStrings&amp;gt; block into &amp;lt;configuration&amp;gt;. &amp;lt;configuration&amp;gt; &amp;lt;connectionStrings&amp;gt; &amp;lt;add connectionString=&quot;Data Source=database,1433;Initial Catalog=BakeryDB;User ID=sa;Password=Docker123&quot; name=&quot;bakery&quot; providerName=&quot;System.Data.SqlClient&quot; /&amp;gt; &amp;lt;/connectionStrings&amp;gt; &amp;lt;system.web&amp;gt; &amp;lt;compilation debug=&quot;true&quot; targetFramework=&quot;4.0&quot; /&amp;gt; &amp;lt;customErrors mode=&quot;Off&quot;/&amp;gt; &amp;lt;/system.web&amp;gt; &amp;lt;system.data&amp;gt; &amp;lt;DbProviderFactories&amp;gt; &amp;lt;remove invariant=&quot;System.Data.SqlServerCe.4.0&quot; /&amp;gt; &amp;lt;add invariant=&quot;System.Data.SqlServerCe.4.0&quot; name=&quot;Microsoft® SQL Server® Compact 4.0&quot; description=&quot;.NET Framework Data Provider for Microsoft SQL Server Compact&quot; type=&quot;System.Data.SqlServerCe.SqlCeProviderFactory, System.Data.SqlServerCe, Version=4.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91&quot; /&amp;gt; &amp;lt;/DbProviderFactories&amp;gt; &amp;lt;/system.data&amp;gt; &amp;lt;/configuration&amp;gt; The name the same name as the “bakery” .sdf file previously used as the database. By using the same name we can avoid re-coding each of our pages’ SQL queries. The Data Source is set to database, which is the name of the Service that is defined in the docker-compose.yml file. Docker’s builtin DNS will resolve the database name for us. Putting a password directly into the Connection String isn’t optimal, and in a future post we’ll explore the use of Docker Secrets for handling sensitive information. What’s up, Bakery With the docker-compose file polished up we can launch both Services with a simple docker-compose up from the root of the VS Solution directory. However, since we’ve been thrashing around with many builds, let’s force a rebuild for the images as the Bakery solution starts up. Feel free to tidy up by removing all running containers and running a docker system prune -f to remove dangling images and volumes. Note that the VS Tools for Docker setup several compose files, which we can stack with multiple -f flags. docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml up --build --force-recreate docker inspect -f &quot;{{ .NetworkSettings.Networks.nat.IPAddress }}&quot; bakery_webapplication_1 With the IP address from the docker inspect statement, open the running Web Application in a browser tab. At this point we could likely delete the entire .sdf file from the solution, but as a sanity check I grabbed the IP address for the database (also via docker inspect) and used SSMS to add a row called “Brownie”. Refreshing the browser shows the new product alongside its peers as expected. Wrap Up Whew! That was fun! We have successfully taken a nearly decade-old application and moved each of its two tiers into a container. In doing so we used multi-stage builds, the Visual Studio Tools for Docker, and Docker Store images from Microsoft. Our Visual Studio solution can now be checked into source control, with a continuous integration system regularly compiling any changes into a new set of images. The portability of such container images allows us to move the application from a legacy Windows Server 2003 or 2008 environment to Windows Server 2016, helping to retire antiquated systems. For more information, please see the SQL Server Lab on GitHub, which heavily influenced this post. Thanks!</summary></entry><entry><title type="html">Moving an Access Database into a Windows Container with Docker</title><link href="http://localhost:4000/2017/10/05/access-database-windows-container/" rel="alternate" type="text/html" title="Moving an Access Database into a Windows Container with Docker" /><published>2017-10-05T13:08:10-04:00</published><updated>2017-10-05T13:08:10-04:00</updated><id>http://localhost:4000/2017/10/05/access-database-windows-container</id><content type="html" xml:base="http://localhost:4000/2017/10/05/access-database-windows-container/">&lt;h1 id=&quot;moving-an-access-database-into-a-windows-container-with-docker&quot;&gt;Moving an Access Database into a Windows Container with Docker&lt;/h1&gt;

&lt;p&gt;At Docker we are seeing a cavalcade of customers finding value in containers not just for greenfield microservice applications, but also as a key to modernizing legacy applications. One recent conversation involved a question: can a legacy line of business application that uses an Access database be transitioned to a container? Having not touched an Access database in many years, I set out to find an answer.&lt;/p&gt;

&lt;h2 id=&quot;the-database&quot;&gt;The Database&lt;/h2&gt;

&lt;p&gt;Needing a sample database that would be representative of an older application, I fired up Access 2017 and created a new database from the Northwind Traders template. This sample database started up as a &lt;code class=&quot;highlighter-rouge&quot;&gt;.accdb&lt;/code&gt; file, the file format that Access moved to back in 2007. I wanted to lean more oldschool, so attempted an export to the older &lt;code class=&quot;highlighter-rouge&quot;&gt;.mdb&lt;/code&gt; format. Unfortunately, Access refused the operation, citing the new features in-use that were not backwards compatible to previous formats.&lt;/p&gt;

&lt;p&gt;With Northwind appearing to be a dead end, I looked online for a second sample database known to SQL aficionados as AdventureWorks. &lt;a href=&quot;https://adventureworksaccess.codeplex.com/&quot;&gt;Codeplex&lt;/a&gt; had a copy, and although it downloaded as a &lt;code class=&quot;highlighter-rouge&quot;&gt;.aacdb&lt;/code&gt;, Access easily exported it as a &lt;code class=&quot;highlighter-rouge&quot;&gt;.mdb&lt;/code&gt; by using the &lt;strong&gt;Access 2000 Database&lt;/strong&gt; option.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/09/image001.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The .mdb file size is over 100MB, which makes GitHub will barf. To shave off some space, I trimmed several rows out of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Sales_SalesOrderDetail&lt;/code&gt; table&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-web-application&quot;&gt;The Web Application&lt;/h2&gt;

&lt;p&gt;With a database secured, it was time to stand up a web application to interface with the data. My goal was to create a proof of concept web application that communicate with the database and displays data via a browser.&lt;/p&gt;

&lt;p&gt;Firing up Visual Studio 2017 Community Edition, I created a solution based on the web application template. Wanting to be as legacy-esque as possible, I set the .NET version to a stately 2.0.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/09/image002.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the solution provisioned, I created a &lt;code class=&quot;highlighter-rouge&quot;&gt;default.aspx&lt;/code&gt; web form and an &lt;code class=&quot;highlighter-rouge&quot;&gt;App_Data&lt;/code&gt; folder. The &lt;code class=&quot;highlighter-rouge&quot;&gt;AdventureWorks.mdb&lt;/code&gt; file went into App_Data, and I scaffolded out a simple page in the aspx file by importing the Bootstrap library and adding a heading.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/09/image003.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now came the fun part: plumbing the database into the web app. The first path taken invovled opening the Server Explorer and using the connection wizard to setup a connnection to an Access DB. This turns out to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Microsoft_Jet_Database_Engine&quot;&gt;JET&lt;/a&gt;, which was long superceed by ACE. Another downside to using JET was that while it worked, I had to install an Office Distributable package. This package was an &lt;code class=&quot;highlighter-rouge&quot;&gt;.exe&lt;/code&gt; wizard with a UI, and I was nervous about getting it to run in headless container environment (where’s an MSI when you need one?) The customer was also using ODBC today, so I stepped back and re-implemented the connection via an ODBC connector.&lt;/p&gt;

&lt;p&gt;ODBC has several ways of configuration, and the Visual Studio wizard took me down a path of using a system-level DSN. This DSN securely maps the location of the database file and ODBC driver settings into a credential that my application can use. After setting the world’s smallest &lt;code class=&quot;highlighter-rouge&quot;&gt;ConnectionString&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;web.config&lt;/code&gt; I was off to the races. Running locally, I was able to see a table of data pulled from the Access database file.&lt;/p&gt;

&lt;p&gt;With my simple application working on my local laptop it was time to container-ize.&lt;/p&gt;

&lt;h2 id=&quot;the-container&quot;&gt;The Container&lt;/h2&gt;

&lt;p&gt;Creating a container involves crafting a Dockerfile. As a base image, &lt;code class=&quot;highlighter-rouge&quot;&gt;microsoft/windowsservernano&lt;/code&gt; is a lighter weight base, however legacy applications rely on a myriad of features and capabilities that are simply not possible in nano. For this app, I instead turned to &lt;code class=&quot;highlighter-rouge&quot;&gt;microsoft/aspnet:4.6.2&lt;/code&gt;, based on the larger and more robust Windows Server Core.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/core/docker/visual-studio-tools-for-docker&quot;&gt;Visual Studio Tools for Docker&lt;/a&gt; are terrific for setting a debugging environment within VS for testing containers. However, I find it overly complex for simpler projects, and the heavy use of build time arguments that are necessary for debugging make greatly increases the complexity of moving the project into a CI/CD pipeline. Instead of auto-generating the Dockerfile via the Tools, I instead opted to handcraft my own&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the &lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt; statement ready to go, it was time to configure the inside of the container to match my local environment. This requires a few steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Configure the ODBC DSN with the local of the &lt;code class=&quot;highlighter-rouge&quot;&gt;.mdb&lt;/code&gt; file and driver. This was accomplished with a bit of PowerShell, and was far easier than I initally expected.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Insert my VS solution code into the pre-determined IIS location of &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\inetpub\wwwroot&lt;/code&gt; as &lt;a href=&quot;https://hub.docker.com/r/microsoft/aspnet/&quot;&gt;instruced&lt;/a&gt; by the aspnet image.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, after adding the steps, building the image, and starting a container, I was met with an ugly error screen.&lt;/p&gt;

&lt;p&gt;StackOverflow informed me that this was likely due to a mismatch in running a 64-bit application with the 32-bit ODBC driver. When I initially created the application, VS by default used the 32-bit version of IIS Express (hence no issue), whereas the aspnet image was defaulting to using 64-bit IIS. Back in VS, I set it to use 64-bit IIS Express, and confirmed that I saw the same error - this issue was realted to 32 vs. 64 bit settings.&lt;/p&gt;

&lt;p&gt;The solution was to adjust the IIS Application Pool within the container to run a 32-bit application. This again was a snippet of PowerShell, which enabled the feature. After a quick re-build and re-creation of a container, I was pleased to see the sample application running as expected.&lt;/p&gt;

&lt;p&gt;Dockerfile Used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;# escape=`
FROM microsoft/aspnet:4.6.2

# Configure the IIS Application Pool for 32-bit applications
RUN C:\Windows\System32\inetsrv\appcmd set apppool /apppool.name:DefaultAppPool /enable32bitapponwin64:true;

# Create a new ODBC DSN mapped to the database file
RUN	Add-OdbcDsn -Name &quot;AWDB&quot; `
	-DriverName &quot;'Microsoft Access Driver (*.mdb)'&quot; `
	-Platform &quot;32-bit&quot; `
	-DsnType &quot;System&quot; `
	-SetPropertyValue 'Dbq=C:\inetpub\wwwroot\App_Data\AdventureWorks.mdb' `
	-PassThru

# Copy files into container
ADD . /inetpub/wwwroot
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the-wrap-up&quot;&gt;The Wrap Up&lt;/h2&gt;

&lt;p&gt;This [incredibly] simple application imparted several nuggets of wisdom related to the containerization of legacy applications.&lt;/p&gt;

&lt;p&gt;First, the “hello world” examples are nice for a quick demonstration, but real-world apps are going to take some finese and adjustments to the base images. Be prepared to track down PowerShell commandlets and overloads that may not be immediately obvious.&lt;/p&gt;

&lt;p&gt;Second, there are many ways to skin a cat and those ways have likely evolved between when the app was created and today. There were 3+ methods of talking to an Access database, each with varying pros/cons, histories, and present-day supportability concerns.&lt;/p&gt;

&lt;p&gt;Finally, erring on the side of configuration via PowerShell rather than an MSI or other installing simplifies the creation and maintenance of images. This will not always be an option, but I greatly preferred PS to touching a ~10 year old installer .exe.&lt;/p&gt;

&lt;p&gt;Full Visual Studio solution is available on &lt;a href=&quot;https://github.com/stevenfollis/accessdb-windows-container&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</content><author><name></name></author><summary type="html">Moving an Access Database into a Windows Container with Docker</summary></entry><entry><title type="html">Node + Express + AzureAD + Yeoman with generator-express-azuread</title><link href="http://localhost:4000/2017/06/23/express-azuread-yeoman-with-generator-express-azuread/" rel="alternate" type="text/html" title="Node + Express + AzureAD + Yeoman with generator-express-azuread" /><published>2017-06-23T09:45:10-04:00</published><updated>2017-06-23T09:45:10-04:00</updated><id>http://localhost:4000/2017/06/23/express-azuread-yeoman-with-generator-express-azuread</id><content type="html" xml:base="http://localhost:4000/2017/06/23/express-azuread-yeoman-with-generator-express-azuread/">&lt;p&gt;Authorization, while always essential, is rarely fun. An Express app can be up and running in the Azure App Service in seconds, but any real-world application needs to be locked down to a particular set of intended users. In the Node world, authentication is handled via the excellent &lt;a href=&quot;http://passportjs.org/&quot;&gt;PassportJS&lt;/a&gt; middleware. The AzureAD team maintains an official Passport “strategy” called &lt;a href=&quot;https://github.com/AzureAD/passport-azure-ad&quot;&gt;passport-azure-ad&lt;/a&gt;, making it easy to secure Node applications with Azure Active Directory.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Need a quick ‘n dirty way to secure your web app? Check out the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/app-service/app-service-authentication-overview&quot;&gt;“EasyAuth”&lt;/a&gt; feature of App Service for a no-code change way of standing up an authentication barrier in front of your app. Even works with social identify providers such as FB!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even with Passport it can be difficult to retrofit an existing code base to support authentication. In the AzureAD space it can be particular tricky - are we needing the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-compare&quot;&gt;v1 or v2&lt;/a&gt; endpoint? &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-flows&quot;&gt;OIDC or Bearer&lt;/a&gt;? What &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-scopes&quot;&gt;permissions&lt;/a&gt; does our app need?&lt;/p&gt;

&lt;p&gt;I routinely find myself piecing together chunks of code from GitHub samples, blog posts, and duct tape to get my app working as expected. To expedite such activities, I threw together a simple &lt;a href=&quot;http://yeoman.io/&quot;&gt;Yeoman&lt;/a&gt; generator for scaffolding out an Express 4 application with AzureAD baked right in. Currently it works for v1 and v2 endpoints with OIDC, but in the future I’d love to expand to support the Bearer strategy, and broader frameworks (Sails, Loopback, Restify, etc.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/stevenfollis/generator-express-azuread/raw/master/media/generator-express-azuread-demo.gif&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s walkthrough how to setup an app using &lt;a href=&quot;https://github.com/stevenfollis/generator-express-azuread&quot;&gt;generator-express-azuread&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;create-an-azuread-application&quot;&gt;Create an AzureAD Application&lt;/h1&gt;
&lt;p&gt;Head over to &lt;a href=&quot;https://apps.dev.microsoft.com&quot;&gt;https://apps.dev.microsoft.com&lt;/a&gt; and login.  You’ll see two sections of application registrations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Converged Applications&lt;/strong&gt; is the newer “v2” endpoint that support both Microsoft Accounts and Organizational Accounts. If you are building a new or multi-tenant application, this would be a good place to hangout.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AzureAD only applications&lt;/strong&gt; is the legacy “v1” endpoint that only support Organizational Accounts.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Check the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-compare&quot;&gt;docs&lt;/a&gt; for a more thorough comparison&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For this sample we’ll use the AAD v2 endpoint. Click &lt;strong&gt;Add an app&lt;/strong&gt; next to Converged Applications.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/07/2017-07-07-11_00_30-My-Applications.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter an application name and click the &lt;strong&gt;Create&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/07/2017-07-07-11_07_29-Register-App---Microsoft-Identity-Platform.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Make a note of the Application Id for later, then click &lt;strong&gt;Generate Password&lt;/strong&gt; and note the generated password.  These two values will be used in our app during the authentication process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/07/2017-07-07-11_08_48-GeneratorSample-Registration.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, AzureAD needs to know a white listed URL to forward tokens. Under the Platforms heading, click the &lt;strong&gt;Add Platform&lt;/strong&gt; button. Select &lt;strong&gt;Web&lt;/strong&gt; and in the &lt;strong&gt;Redirect URLs&lt;/strong&gt; section, enter &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000/auth/openid/return&lt;/code&gt;.  This URL corresponds to the route that our application has implemented to handle the return message from AzureAD. It can be anything, but by default the generator has implemented such logic at &lt;code class=&quot;highlighter-rouge&quot;&gt;/auth/openid/return&lt;/code&gt; (following the lead of the AzureAD team’s samples). Feel free to adjust to your heart’s content. Be sure to hit the &lt;strong&gt;Save&lt;/strong&gt; button at the bottom of the screen, then you’re good to go.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/07/2017-07-07-11_14_23-GeneratorSample-Registration.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The section titled &lt;strong&gt;Microsoft Graph Permissions&lt;/strong&gt; allows us to define which services and features our application can access. By default you can see &lt;code class=&quot;highlighter-rouge&quot;&gt;User.Read&lt;/code&gt; but feel free to configure whichever scope(s) your app requires.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You should now have a ClientID and Password for the application. Next, we’ll scaffold out the application.&lt;/p&gt;

&lt;h1 id=&quot;create-the-application&quot;&gt;Create the application&lt;/h1&gt;
&lt;p&gt;To create the application we’ll be using the ever-popular &lt;a href=&quot;http://yeoman.io/&quot;&gt;Yeoman&lt;/a&gt; tool. Not familiar with Yeoman? Think of it as &lt;code class=&quot;highlighter-rouge&quot;&gt;File -&amp;gt; New Project&lt;/code&gt; in Visual Studio, for everything non-MSFT. Yeoman simply generates a folder structure and set of files to begin a new application. Check out &lt;a href=&quot;http://yeoman.io/learning/index.html&quot;&gt;Getting Started&lt;/a&gt; for setup help. You’ll need NodeJS installed, and then run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g yo&lt;/code&gt; to install Yeoman globally.&lt;/p&gt;

&lt;p&gt;Once Yeoman is installed, install &lt;a href=&quot;https://github.com/stevenfollis/generator-express-azuread&quot;&gt;generator-express-azuread&lt;/a&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g generator-express-azuread&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With Yeoman and the generator ready to roll, open a terminal window and create a new directory.  Then run &lt;code class=&quot;highlighter-rouge&quot;&gt;yo express-azuread&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Give the application a name&lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;Version 2&lt;/strong&gt; as the specified endpoint&lt;/li&gt;
  &lt;li&gt;Paste in the Client ID and Secret&lt;/li&gt;
  &lt;li&gt;The generator defaults to the &lt;code class=&quot;highlighter-rouge&quot;&gt;common&lt;/code&gt; endpoint. This can be used for multi-tenant applications. Use this, or paste in the GUID for your tenant if you’d like to be more specific.&lt;/li&gt;
  &lt;li&gt;The redirectUrl should match what was created in the app registration process, by default we used &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000/auth/openid/return&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/07/2017-07-07-11_28_35-npm.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yeoman then scaffolds out all the files necessary for your application, and runs an &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt; to hydrate the app with all required dependencies.&lt;/p&gt;

&lt;h1 id=&quot;run-the-application&quot;&gt;Run the application&lt;/h1&gt;
&lt;p&gt;From your directory, execute &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;.  The application will be running at &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000&lt;/code&gt;. Open a browser and navigate to the URL.&lt;/p&gt;

&lt;p&gt;The home route is public, meaning it does not require authentication. Click the &lt;strong&gt;Login&lt;/strong&gt; button in the top right corner to initiate the login process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/07/2017-07-07-11_33_44-GeneratorSample.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The application redirects you to AzureAD’s login page, where you can login with a MSA or Organizational set of credentials.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/07/2017-07-07-11_35_14-Sign-in-to-your-account.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After entering credentials, you will be asked to accept a series of permissions, granting your application rights as defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;User.Profile&lt;/code&gt; scope set by default in Application Registration.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/07/2017-07-07-13_13_17-Authorize-GeneratorSample.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once signed in, AzureAD redirects you back to the application’s &lt;code class=&quot;highlighter-rouge&quot;&gt;redirectUrl&lt;/code&gt; route that we specified earlier. You should now see your name in the top right corner. Click the name to see a dropdown, and then select &lt;strong&gt;Profile&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/07/2017-07-07-13_16_12-GeneratorSample.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This profile route is the 2nd of two screens implemented by the generator. It queries the &lt;a href=&quot;https://developer.microsoft.com/en-us/graph/&quot;&gt;Microsoft Graph&lt;/a&gt; for the signed in user, displaying all properties as a table.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/07/2017-07-07-13_18_12-GeneratorSample.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Voilà! We now have an Express application with AzureAD scaffolded out and authenticating users against Azure Active Directory.&lt;/p&gt;

&lt;h1 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h1&gt;
&lt;p&gt;The generator is not intended as a kitchen sink simple, and has purposely implemented very limited logic. From this starting point the intent is to build out routes and application behavior as applicable for your scenario.&lt;/p&gt;

&lt;p&gt;Hope this saves a bit of time on your next web application project! And as always, please feel free to send pull requests and make the project even better.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Be sure to check out all the code snippets at &lt;a href=&quot;https://azure.microsoft.com/en-us/resources/samples/?service=active-directory&quot;&gt;Azure.com&lt;/a&gt; for more AzureAD goodness.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">Authorization, while always essential, is rarely fun. An Express app can be up and running in the Azure App Service in seconds, but any real-world application needs to be locked down to a particular set of intended users. In the Node world, authentication is handled via the excellent PassportJS middleware. The AzureAD team maintains an official Passport “strategy” called passport-azure-ad, making it easy to secure Node applications with Azure Active Directory.</summary></entry><entry><title type="html">“Not Hotdog” from the Silicon Valley TV show with Cognitive Services + Bot Framework</title><link href="http://localhost:4000/2017/06/02/nothotdog/" rel="alternate" type="text/html" title="&quot;Not Hotdog&quot; from the Silicon Valley TV show with Cognitive Services + Bot Framework" /><published>2017-06-02T18:25:53-04:00</published><updated>2017-06-02T18:25:53-04:00</updated><id>http://localhost:4000/2017/06/02/nothotdog</id><content type="html" xml:base="http://localhost:4000/2017/06/02/nothotdog/">&lt;p&gt;I’m a huge fan of the television show &lt;a href=&quot;https://en.wikipedia.org/wiki/Silicon_Valley_(TV_series)&quot;&gt;Silicon Valley&lt;/a&gt; on HBO. It follows the lives of a startup company in California, but also is wicked funny.&lt;/p&gt;

&lt;p&gt;A few weeks ago I was watching S04E04 when a funny app was shown:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Disclaimer: HBO is OK with potty mouths but potentially NSFW&lt;/p&gt;
&lt;/blockquote&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ACmydtFDTGs&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Jin Yang’s app gave me an idea: how hard would it be to implement this Not Hotdog app on Azure? Spoiler: pretty easy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/06/hotdog.PNG&quot; alt=&quot;hotdog&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Components used:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.botframework.com/&quot;&gt;Bot Framework&lt;/a&gt; was faster than building a true mobile application&lt;/li&gt;
  &lt;li&gt;MSFT &lt;a href=&quot;https://azure.microsoft.com/en-us/services/cognitive-services/&quot;&gt;Cognitive Services&lt;/a&gt; has a Computer Vision function that takes an image and returns what’s in it (hopefully pre-optimized for hotdog related imagery)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I started with a basic bot. The default conversation route &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; receives all incoming conversations.  If text is received, the bot returns a message instructing the user to upload an image. If an image attachment(s) is uploaded, then Cognitive Services is called to check on what’s in the image.&lt;/p&gt;

&lt;p&gt;Be sure to set an environment variable to your Cognitive Services key.  The ever-creative &lt;code class=&quot;highlighter-rouge&quot;&gt;COGNITIVE_SERVICES_KEY&lt;/code&gt; variable is used by the bot to authenticate POST messages to the CS endpoint.&lt;/p&gt;

&lt;p&gt;What if you send something other than a hotdog? The bot writes out into the card the description field returned by CS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/06/nothotdog.PNG&quot; alt=&quot;nothotdog&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Happy Hotdogging!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Code is hanging out on &lt;a href=&quot;https://github.com/stevenfollis/nothotdog&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">I’m a huge fan of the television show Silicon Valley on HBO. It follows the lives of a startup company in California, but also is wicked funny.</summary></entry><entry><title type="html">Monitoring an Azure IoT Gateway with a Socket.io Module</title><link href="http://localhost:4000/2017/05/08/monitoring-an-azure-iot-gateway-with-socket-io/" rel="alternate" type="text/html" title="Monitoring an Azure IoT Gateway with a Socket.io Module" /><published>2017-05-08T10:59:51-04:00</published><updated>2017-05-08T10:59:51-04:00</updated><id>http://localhost:4000/2017/05/08/monitoring-an-azure-iot-gateway-with-socket-io</id><content type="html" xml:base="http://localhost:4000/2017/05/08/monitoring-an-azure-iot-gateway-with-socket-io/">&lt;p&gt;Internet of Things (IoT) solutions involve significant quantities of data. When that data is all nicely sent up into a cloud (such as Azure) it is straightforward to analyze and monitor.  However, many hybrid IoT scenarios involve on-premises data that is never sent up to the cloud due to available bandwidth, cost, or data volume. We may be only sending aggregations or exceptions to the cloud, but operations teams on-prem may be wanting insight into the full data that is being generated.&lt;/p&gt;

&lt;p&gt;One way to monitor on-prem data is to leverage the &lt;a href=&quot;https://azure.microsoft.com/en-us/services/iot-hub/iot-gateway-sdk/&quot;&gt;Azure IoT Gateway&lt;/a&gt; that may be already in-place.  The IoT GW provides a structured approach to consuming data on-prem, processing the data, and uploading the data to a cloud service (such as an &lt;a href=&quot;https://azure.microsoft.com/en-us/services/iot-hub/&quot;&gt;Azure IoT Hub&lt;/a&gt;) via a module pattern.  These modules can be devloped in Java, C#, Node.js, or C (or mix ‘n match).&lt;/p&gt;

&lt;p&gt;Today we will extend the IoT GW with a module to visualize the full fire hose of on-prem data before it is processed and batched for upload. We will do this by creating a &lt;a href=&quot;https://socket.io/&quot;&gt;Socket.io&lt;/a&gt; server that communicates real-time data over a &lt;a href=&quot;https://en.wikipedia.org/wiki/WebSocket&quot;&gt;WebSocket&lt;/a&gt; to an HTML page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/05/screenshot--1-.png&quot; alt=&quot;CompletedDashboard&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;run-the-sample&quot;&gt;Run the Sample&lt;/h1&gt;
&lt;p&gt;The IoT team has provided a &lt;a href=&quot;https://github.com/Azure-Samples/azure-iot-gateway-samples&quot;&gt;sample application&lt;/a&gt; to demonstrate how the gateway works.  Follow the &lt;a href=&quot;https://github.com/Azure-Samples/azure-iot-gateway-samples#how-to-run-javascript-modules-windows-10ubuntu-linux-14&quot;&gt;setup instructions&lt;/a&gt; for JavaScript and run the sample locally. Within a few minutes we get an IoT Gateway running, a module that generates sample device data for temperature and humidity, and a printer module that echoes the value into our terminal:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/05/sample-run.gif&quot; alt=&quot;sample-running&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Not bad! However, reading a cavalcade of sensor data is difficult in a terminal window. Instead, we can pipe that data feed into a browser for a more visual take on the same information. First we will create a new module, then update the gateway configuration to leverage the new module.&lt;/p&gt;

&lt;h1 id=&quot;create-the-socketio-module&quot;&gt;Create the Socket.io module&lt;/h1&gt;
&lt;p&gt;The sample includes a &lt;a href=&quot;https://github.com/Azure-Samples/azure-iot-gateway-samples/blob/master/js/modules/printer.js&quot;&gt;printer.js&lt;/a&gt; module that receives messages from the pipeline and &lt;a href=&quot;https://github.com/Azure-Samples/azure-iot-gateway-samples/blob/master/js/modules/printer.js#L17&quot;&gt;logs&lt;/a&gt; them to the console. We will improve on this but receiving the same messages, yet emitting them via Socket.io.&lt;/p&gt;

&lt;p&gt;Create a new file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/modules&lt;/code&gt; folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;socketio.js&lt;/code&gt; and paste the following code:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'socket.io'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)();&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SocketioModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Default port for the Socket.io server&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;broker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;broker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;broker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Update port if provided as a configuration argument&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Attach socket.io to a port&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Started Socket.io server on port &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Convert data into an object&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Emit a message via socket.io&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Close socket on destroy&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`socketio.destroy`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SocketioModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Notice the syntax is a bit different? Gateway modules support the fancy new(ish) &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;ES6 Class Syntax&lt;/a&gt; so we used that format&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This new module is doing several things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Implements the methods that each module needs to have - &lt;code class=&quot;highlighter-rouge&quot;&gt;create()&lt;/code&gt; runs on startup, &lt;code class=&quot;highlighter-rouge&quot;&gt;receive()&lt;/code&gt; processes a newly received message from the broker, and &lt;code class=&quot;highlighter-rouge&quot;&gt;destroy()&lt;/code&gt; tidies up on shutdown. See the &lt;a href=&quot;https://github.com/Azure/azure-iot-gateway-sdk/blob/master/core/devdoc/module.md&quot;&gt;devdocs&lt;/a&gt; for more details&lt;/li&gt;
  &lt;li&gt;Instantiates a Socket.io server&lt;/li&gt;
  &lt;li&gt;The constructor sets a default port of &lt;code class=&quot;highlighter-rouge&quot;&gt;8000&lt;/code&gt;, or a custom port can be defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;configuration&lt;/code&gt; argument of &lt;code class=&quot;highlighter-rouge&quot;&gt;create()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;When a message is received, a Socket.io event called &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; is emitted to the socket&lt;/li&gt;
  &lt;li&gt;On shutdown, the Socket.io server is closed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Be sure to use npm to install the Socket.io dependency in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/js&lt;/code&gt; folder of the sample:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install socket.io --save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;update-the-gateway-configuration&quot;&gt;Update the gateway configuration&lt;/h1&gt;
&lt;p&gt;Gateways take a configuration file, written in JSON, that handles 3 types of configurations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sets up &lt;code class=&quot;highlighter-rouge&quot;&gt;loaders&lt;/code&gt; for each programming language. If you are using a Java module, you need to load Java, etc. Only load languages that your modules are using.&lt;/li&gt;
  &lt;li&gt;Defines all &lt;code class=&quot;highlighter-rouge&quot;&gt;modules&lt;/code&gt; to be used and any configuration arguments&lt;/li&gt;
  &lt;li&gt;Establishes relationships between modules via &lt;code class=&quot;highlighter-rouge&quot;&gt;links&lt;/code&gt; that define data from from Module A into Module B.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;loaders&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modules: [],
      &quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;: []
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Opening the &lt;code class=&quot;highlighter-rouge&quot;&gt;gw.local.config.json&lt;/code&gt; file from our sample, replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;node_printer&lt;/code&gt; module with the new module we created in the &lt;code class=&quot;highlighter-rouge&quot;&gt;modules&lt;/code&gt; array:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node_socketio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;loader&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;entrypoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;main.path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modules/socketio.js&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;We gave a &lt;strong&gt;name&lt;/strong&gt; value of &lt;code class=&quot;highlighter-rouge&quot;&gt;node_socketio&lt;/code&gt; to match the existing convention, but we could have named it &lt;code class=&quot;highlighter-rouge&quot;&gt;socketio&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;io&lt;/code&gt;, or anything else our hearts desired&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The gateway now knows to load our module. To wire it into the pipeline, adjust the &lt;code class=&quot;highlighter-rouge&quot;&gt;links&lt;/code&gt; section by replacing &lt;code class=&quot;highlighter-rouge&quot;&gt;node_printer&lt;/code&gt; sink with our &lt;code class=&quot;highlighter-rouge&quot;&gt;node_socketio&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The adjusted &lt;code class=&quot;highlighter-rouge&quot;&gt;gw.local.config.json&lt;/code&gt; file now looks like:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;loaders&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node_sensor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;loader&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;entrypoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;main.path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modules/sensor.js&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node_socketio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;loader&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;entrypoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;main.path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modules/socketio.js&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;links&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node_sensor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sink&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node_socketio&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fun tip for links: use an &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; to grab all traffic coming into the gateway without a predecessor module (&lt;a href=&quot;https://github.com/Azure/azure-iot-gateway-sdk/blob/master/samples/java_sample/src/java_sample_lin.json#L50-L53&quot;&gt;example&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;restart-the-gateway&quot;&gt;Restart the gateway&lt;/h1&gt;
&lt;p&gt;With our new module primed, and the configuration options updated, let’s restart our gateway. From the &lt;code class=&quot;highlighter-rouge&quot;&gt;/js&lt;/code&gt; folder, run the start command from a terminal window:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The gateway should startup and inform us of the configured Socket.io port:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/05/restarted-gateway.PNG&quot; alt=&quot;restarted gateway&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point the &lt;code class=&quot;highlighter-rouge&quot;&gt;node_sensor&lt;/code&gt; module is generating sample data, but we are not echoing everything to the console since the &lt;code class=&quot;highlighter-rouge&quot;&gt;node_printer&lt;/code&gt; module was removed.&lt;/p&gt;

&lt;h1 id=&quot;create-a-user-interface&quot;&gt;Create a user interface&lt;/h1&gt;
&lt;p&gt;Our server is emitting events over a WebSocket, but we need a client to receive and visualize them. For this let’s use a simple HTML page. We can receive the events with &lt;a href=&quot;https://github.com/socketio/socket.io-client&quot;&gt;Socket.io’s JavaScript library&lt;/a&gt;, and then visualize the data points with &lt;a href=&quot;https://github.com/epochjs/epoch&quot;&gt;Epoch&lt;/a&gt;, a real-time charting library implemented in JavaScript. A smidge of &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; will help with adding rows to a table, and &lt;a href=&quot;https://getmdl.io/&quot;&gt;Material Design Lite&lt;/a&gt; will provide some nice lipstick.&lt;/p&gt;

&lt;p&gt;Create a new file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/js&lt;/code&gt; folder named &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; and paste in the following code:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Sensor Data&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- CSS --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://code.getmdl.io/1.3.0/material.indigo-pink.min.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/epoch/0.8.4/css/epoch.min.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;.demo-layout-waterfall&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.mdl-layout__header-row&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.mdl-navigation__link&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:last-of-type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;padding-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;demo-layout-waterfall mdl-layout mdl-js-layout&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Header --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;header&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-layout__header mdl-layout__header--waterfall&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Top row, always visible --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-layout__header-row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Title --&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-layout-title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Sensor Data&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-layout-spacer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-textfield mdl-js-textfield mdl-textfield--expandable
                  mdl-textfield--floating-label mdl-textfield--align-right&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-textfield__expandable-holder&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-textfield__input&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sample&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;waterfall-exp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-layout__drawer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-layout-title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Title&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-navigation&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-navigation__link&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Link&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-navigation__link&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Link&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-navigation__link&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Link&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-navigation__link&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Link&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;main&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-layout__content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page-content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Sensor Data Table --&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-grid&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-cell mdl-cell--12-col&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;c&quot;&gt;&amp;lt;!--d3 Colors: https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md--&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-chip&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;float: right; background-color:#2ca02c; color:#FFF&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-chip__text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Device 3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;

                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-chip&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;float: right; background-color:#ff7f0e; color:#FFF&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-chip__text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Device 2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;

                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-chip&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;float: right; background-color:#1f77b4; color:#FFF&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-chip__text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Device 1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;

                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Humidity&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;chart&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;epoch category10&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width: 1000px; height: 200px; margin: 0 auto 20px&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Sensor Data&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-data-table mdl-js-data-table mdl-shadow--2dp&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width: 100%&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mdl-data-table__cell--non-numeric&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Time&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Device&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Humidity&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Temp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;tbody&amp;gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;


        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- JS --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.2.1.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://code.getmdl.io/1.3.0/material.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.3/socket.io.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://cdnjs.cloudflare.com/ajax/libs/epoch/0.8.4/js/epoch.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Change port from default 8000 if adjusted in server-side module args&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http://localhost:8000'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Process message when received from server&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Echo message to console&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Write data into new table row&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'table tbody'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&amp;lt;tr&amp;gt;&amp;lt;td class=&quot;mdl-data-table__cell--non-numeric&quot;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sensorId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hmdt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Keep a tidy number of 25 table rows&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'table tbody tr'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Update dataset&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hmdt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hmdt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hmdt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Create chart with Epoch&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#chart'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;epoch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'time.line'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;axes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'left'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bottom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'right'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Device 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Device 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Device 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(And yes, I’m sorry for inserting the JS into a HTML file, but it makes this demo easier :) )&lt;/p&gt;

&lt;p&gt;This HTML page loads all our dependencies, then uses JavaScript to listen on the Socket for an emitted event. It then updates the chart and the table to add the data to the page.&lt;/p&gt;

&lt;p&gt;Ensure the gateway is still running, and open this local file directly in a browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2017/05/running-dashboard.gif&quot; alt=&quot;running&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;/h1&gt;
&lt;p&gt;Today we took the Azure IoT Gateway and created a custom module that exposes messages from the gateway broker to a WebSocket via Socket.io. We then attached a dashboard UI to visualize the data in real-time.&lt;/p&gt;

&lt;p&gt;This scenario targets on-premises teams that want a real-time look at their gateway traffic, without standing up significant amounts of infrastructure, by tapping into the robust module structure of the IoT Gateway. While this was done totally in JavaScript, we could have used a variety of languages to build our custom module.&lt;/p&gt;

&lt;p&gt;This module has been published on &lt;a href=&quot;https://www.npmjs.com/package/iot-gateway-socketio&quot;&gt;npm&lt;/a&gt; for ease of use and is available on &lt;a href=&quot;https://github.com/stevenfollis/iot-gateway-socketio&quot;&gt;GitHub&lt;/a&gt; (including a complete &lt;a href=&quot;https://github.com/stevenfollis/iot-gateway-socketio/tree/master/sample&quot;&gt;sample&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</content><author><name></name></author><summary type="html">Internet of Things (IoT) solutions involve significant quantities of data. When that data is all nicely sent up into a cloud (such as Azure) it is straightforward to analyze and monitor. However, many hybrid IoT scenarios involve on-premises data that is never sent up to the cloud due to available bandwidth, cost, or data volume. We may be only sending aggregations or exceptions to the cloud, but operations teams on-prem may be wanting insight into the full data that is being generated.</summary></entry><entry><title type="html">Continuous Integration (CI) for Azure Resource Manager (ARM) Templates with Visual Studio Team Services (VSTS)</title><link href="http://localhost:4000/2016/12/12/continuous-integration-ci-for-arm-templates/" rel="alternate" type="text/html" title="Continuous Integration (CI) for Azure Resource Manager (ARM) Templates with Visual Studio Team Services (VSTS)" /><published>2016-12-12T06:07:34-05:00</published><updated>2016-12-12T06:07:34-05:00</updated><id>http://localhost:4000/2016/12/12/continuous-integration-ci-for-arm-templates</id><content type="html" xml:base="http://localhost:4000/2016/12/12/continuous-integration-ci-for-arm-templates/">&lt;p&gt;The concept of &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;Continuous Integration&lt;/a&gt; makes developing any piece of software infinitely more efficient and convenient.  At a high level, CI takes a set of changes in a code repository and makes sure the changes don’t break stuff. For code that has compilation steps this is better understood, but how do we get the benefits of CI with a declarative JSON document such as an ARM Template?&lt;/p&gt;

&lt;p&gt;This was the question that arose on a recent project that included an ARM Template that needed to be deployed in multiple regions.  Regular changes were being made to the template file that were committed to the repository without any real checks - it took a full deployment to determine if the template would successfully deploy or fail miserably. To smooth out this process, we took the ARM Template and used a &lt;a href=&quot;https://www.visualstudio.com/en-us/docs/release/author-release-definition/more-release-definition&quot;&gt;Visual Studio Team Services Release Definition&lt;/a&gt; to automate the validation of a template in a myriad of regions.&lt;/p&gt;

&lt;p&gt;We began by authoring a PowerShell script that would take an ARM Template and loop through all regions worldwide to create Resource Groups and deployments.  Doing a full deployment in every region worldwide is expensive, time consuming, and may hit subscriptions limits for resources such as VM cores.  Instead, we can send a template to ARM’s &lt;a href=&quot;https://docs.microsoft.com/en-us/rest/api/resources/deployments#Deployments_Validate&quot;&gt;Validate Endpoint&lt;/a&gt;.  This endpoint checks the syntax of a template file without doing an actual deployment, and determines if the file will be accepted by the Resource Manager during a deployment.  Using this endpoint is a cheaper, easier way to get a good idea of a template’s deploy-ability, and was a better option than full on deployments.&lt;/p&gt;

&lt;p&gt;Delightfully, the out of the box Azure Resource Group Deployment task within VSTS already had the capability to do a validation only deployment, meaning the in-flight PowerShell script was scrapped.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/12/image001.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First, we need a new Release Definition. From there I created an &lt;strong&gt;Environment&lt;/strong&gt; for each of the 15 Azure Regions that I wanted to test the template against. I’d used 2-5 Environments before, but VSTS had no issue with 15 disparate Environments.  Within each of these Environments two tasks were created:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The first Azure Resource Group Deployment task takes the specified ARM Template and executes a &lt;strong&gt;Validation Only&lt;/strong&gt; deployment. Since a Resource Group is needed, this step automatically generates a RG as part of the task&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The second Azure Resource Group Deployment tasks deletes the Resource Group that is created in the first step&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/12/image002-1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that under &lt;strong&gt;Control Options&lt;/strong&gt; we’ve checked the box for &lt;strong&gt;Continue on error&lt;/strong&gt;. This will ensure that even if a template fails validation that the release will continue to the cleanup task. Else our subscription will be littered with empty resource groups&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By default the regions will execute serially one after another. This is fine if we’re using the convenient Hosted Agent within VSTS to run our builds up in the cloud, however we may have a pool of servers with Build Agents installed. In this case we’d like to execute validations in parallel.  Go ahead and open the &lt;strong&gt;Deployment conditions&lt;/strong&gt; for each Environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/12/image003.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, adjust the Trigger to &lt;strong&gt;After release creation&lt;/strong&gt;. This will allow multiple environments to run at the same time, making the process far quicker.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/12/image004.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With our Release Definition completed with an Environment for each Azure Region, create a New Release. VSTS will run the tasks and provide a nice dashboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/12/image005.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I can see from the Deployment Status column that there was an issue with Brazil South. At this time the task does not provide verbose feedback on why the template failed to validate, but I now have enough information to focus my debugging efforts.&lt;/p&gt;

&lt;p&gt;The Validate endpoint does not catch 100% of issues. We ran into a scenario where a template validated, but a particular VM size was unavailable in the given region. There is no real substitute for a real deployment to ensure a template functions 100% properly, however this approach of the Validate endpoint catches a large number of issues before a deployment even occurs.&lt;/p&gt;</content><author><name></name></author><summary type="html">The concept of Continuous Integration makes developing any piece of software infinitely more efficient and convenient. At a high level, CI takes a set of changes in a code repository and makes sure the changes don’t break stuff. For code that has compilation steps this is better understood, but how do we get the benefits of CI with a declarative JSON document such as an ARM Template?</summary></entry><entry><title type="html">Managing Azure Resource Manager (ARM) Template deployments with CSV files</title><link href="http://localhost:4000/2016/11/21/managing-arm-templates-with-csv-parameters/" rel="alternate" type="text/html" title="Managing Azure Resource Manager (ARM) Template deployments with CSV files" /><published>2016-11-21T08:56:16-05:00</published><updated>2016-11-21T08:56:16-05:00</updated><id>http://localhost:4000/2016/11/21/managing-arm-templates-with-csv-parameters</id><content type="html" xml:base="http://localhost:4000/2016/11/21/managing-arm-templates-with-csv-parameters/">&lt;p&gt;ARM Templates are great.  They allow us to provision complex solutions in a repeatable and clearly understood manner.  The parameters model enables flexible templates that can adapt to a variety of inputs, however the management of these parameter files can be cumbersome.&lt;/p&gt;

&lt;p&gt;During the planning phase of a project, Excel is often used to chart out the required virtual machines for a given solution. Let’s take the following values, and create a solution in Azure using Azure Resource Manager deployments.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/11/image-001-1.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-a-console-application&quot;&gt;Create a console application&lt;/h2&gt;
&lt;p&gt;I generated a small console application written in NodeJS that will wire up several steps. I’m using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;ECMA6 Promises&lt;/a&gt; Syntax to more easily control workflow, and avoid a world of callback mess.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ECMA6 Promises need Node &lt;a href=&quot;http://www.infoworld.com/article/2981932/javascript/nodejs-4-0-0-arrives-with-ecmascript-6-backing.html&quot;&gt;v4&lt;/a&gt; or greater. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;node -v&lt;/code&gt; to ensure you are up to date, else visit &lt;a href=&quot;http://nodejs.org&quot;&gt;http://nodejs.org&lt;/a&gt; and grab an updated version&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Scaffold out the console application with defining dependencies and setting up the Promise flow:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msRestAzure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ms-rest-azure'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resourceManagement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;azure-arm-resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Converter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;csvtojson&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Converter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;converter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Converter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({});&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./config/config'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'lodash'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Starting deployment`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Login to Azure &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Execute in parallel all deployent preparation tasks&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createRG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deploySharedTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deployTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Deployed ARM Template to Azure`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Find all source code for this console application on &lt;a href=&quot;https://github.com/stevenfollis/Samples/tree/master/CSVProvisioner&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;authenticate-with-a-service-principal&quot;&gt;Authenticate with a Service Principal&lt;/h3&gt;
&lt;p&gt;An Azure Service Principal is an application within Azure Active Directory that can be given specific permissions within an Azure Subscription.  In our scenario, we can give a Service Principal a &lt;strong&gt;Contributor&lt;/strong&gt; role within our Azure Subscription, allowing the SP to create Resource Groups and Resources on our behalf.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// =========================================================&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Step 1: Login to Azure with a Service Principal&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// https://azure.microsoft.com/en-us/documentation/articles/resource-group-authenticate-service-principal-cli/&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =========================================================&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;msRestAzure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loginWithServicePrincipalSecret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;APPLICATION_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;APPLICATION_SECRET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DOMAIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Authenticated with Azure via Service Principal`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Create an ARM client&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resourceManagement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ResourceManagementClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AZURE_SUBSCRIPTION_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Resolve client&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Service Principals can be created via the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-create-service-principal-portal&quot;&gt;Azure Portal&lt;/a&gt;, &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-authenticate-service-principal&quot;&gt;PowerShell&lt;/a&gt;, or the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-authenticate-service-principal-cli&quot;&gt;Azure XPlat CLI&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;create-a-resource-group&quot;&gt;Create a Resource Group&lt;/h3&gt;
&lt;p&gt;Our configuration file sets the name and region of a Resource Group that will hold all of our resources.  We also add a tag to the RG for further management capabilities in the future.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// =========================================================&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Step 2: Create an Azure Resource Group &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =========================================================&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createRG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Use the RM client to create a resource group&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resourceGroups&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createOrUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Created Resource Group named &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Resolve Promise&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;deploy-shared-resources&quot;&gt;Deploy Shared Resources.&lt;/h3&gt;
&lt;p&gt;The CSV file lists 5 virtual machines, but there are separate resources that will be used across all of our virtual machines. Right now this consists of a Virtual Network that each VM will use.  These shared resources are defined in a dedicated ARM Template, and will generate an output value to be used in future steps.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// =========================================================&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Step 3: Deploy Shared Resources ARM Template&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =========================================================&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deploySharedTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rgName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deploymentName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`SharedResources-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Read template from disk&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sharedResourcesPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'utf8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deploymentParameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;parameters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;template&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;mode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Incremental&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Deploy template&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deployments&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createOrUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rgName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deploymentName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deploymentParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Deployed Shared Resources ARM Template`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Remove the Type attribute for the RG outputs&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scrubbedOutputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

                &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

                &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrubbedOutputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;setup-parameters&quot;&gt;Setup Parameters&lt;/h3&gt;
&lt;p&gt;Each row of the CSV will become a set of parameters used for a deployment.  Since Azure works primarily out of JSON objects, we need to serialize the local CSV file into an array of JSON objects.  Then we will extend those parameters by adding the output value from the Shared Resources deployment so that each VM knows which virtual network to use.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// =========================================================&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Step 4: Parse CSV File containing ARM Template parameters and merge with Shared RG's outputs&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =========================================================&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sharedOutputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// CSV values are returned as s tring (ex. {name: jane} )&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// ARM parameters have a format of parameter name, then a value object&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// ex. {name: jane} needs to be processed to {name: {value:jane}}&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Loop through the original rows and process a new array&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Create new array to hold processed parameters&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;processedParameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Loop through the original values&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Adjust value from a string to an object&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;processed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;original&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

                &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Add parameters from Shared Resources deployment&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assignIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;processed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sharedOutputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Push new object into the array&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;processedParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;processed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Parsed parameters CSV file`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;processedParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;generate-vm-deployments&quot;&gt;Generate VM Deployments&lt;/h3&gt;
&lt;p&gt;We have an array of JSON objects corresponding to a desired VM.  We will loop through each of these objects, combining them with a Virtual Machine ARM Template to create a series of deployments to the Resource Group.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// =========================================================&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Step 5: Deploy specific ARM Template&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =========================================================&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deployTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Set variables from the values array&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rgName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Read template from disk&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'utf8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Loop through the sets of parameters &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// creating a new deployment for each set in the parameters array&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Define a unique deployment name&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deploymentName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Define object for template deployment&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deploymentParameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&quot;parameters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&quot;template&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&quot;mode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Incremental&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Deploy template&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deployments&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createOrUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rgName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deploymentName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deploymentParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Deployed ARM Template`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Iterate the counter  &lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;run-the-console-application&quot;&gt;Run the console application&lt;/h2&gt;
&lt;p&gt;Navigate in the terminal to your working folder, and execute &lt;code class=&quot;highlighter-rouge&quot;&gt;node app.js&lt;/code&gt; to start up the CSVProvisioner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/11/image-002-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Using &lt;a href=&quot;http://cmder.net/&quot;&gt;cmder&lt;/a&gt; but works across any shell&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After a few minutes you should have a shiny new Resource Group full of resources that were defined in your CSV file (along with a shared VNet).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/11/image-003-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;wind-down&quot;&gt;Wind Down&lt;/h2&gt;
&lt;p&gt;“Hello World” samples for Azure Resource Manager often use a simple template and a PowerShell command, but you can integrate ARM into your process in a variety of ways.  For those that rely on spreadsheets to plan and organize infrastructure deployments, this sample demonstrates how deploy a series of Virtual Machines defined in a CSV file into an Azure Resource Group.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Find all source code for this console application on &lt;a href=&quot;https://github.com/stevenfollis/Samples/tree/master/CSVProvisioner&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">ARM Templates are great. They allow us to provision complex solutions in a repeatable and clearly understood manner. The parameters model enables flexible templates that can adapt to a variety of inputs, however the management of these parameter files can be cumbersome.</summary></entry><entry><title type="html">Background image thumbnail processing with Azure Functions and NodeJS</title><link href="http://localhost:4000/2016/09/24/background-image-processing-with-azure-functions-and-nodejs/" rel="alternate" type="text/html" title="Background image thumbnail processing with Azure Functions and NodeJS" /><published>2016-09-24T13:06:03-04:00</published><updated>2016-09-24T13:06:03-04:00</updated><id>http://localhost:4000/2016/09/24/background-image-processing-with-azure-functions-and-nodejs</id><content type="html" xml:base="http://localhost:4000/2016/09/24/background-image-processing-with-azure-functions-and-nodejs/">&lt;p&gt;Nothing gunks up an application server faster than having to crunch images, yet image manipulation is a common tasks in today’s applications.  Let’s take thumbnail generation as an example.  Traditionally, if a user uploads an image, our application would generate the thumbnail during the upload event.  The user has to sit and wait for the operation to complete, and we have to hope the server has capacity to handle that user’s operation.  Worst case we end in errors, failed uploads, and frustrated users.&lt;/p&gt;

&lt;p&gt;To get around this problem, such work should be offloaded into “background tasks”, where expensive operations are handled at a later time than on the traditional initial creation event.  For thumbnail generation, the uploaded image may be placed in a queue to be processed later by a separate process.  The user can go about their business, and the background processing can be scaled independently of the front end to be better meet demand.  Everyone wins.  If you’ve ever uploaded a video to YouTube, did you wait 20 minutes with a progress bar while YouTube processed the file?  Nope, you came back 20 minutes later when it completed.  This is “eventual consistency” at work, and is a far better pattern for distributed, high scale applications.&lt;/p&gt;

&lt;p&gt;The AzureCAT PnP team has some great guidance on background tasks &lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/best-practices-background-jobs/&quot;&gt;here&lt;/a&gt;, but I wanted to take the shiny new &lt;a href=&quot;https://azure.microsoft.com/en-us/services/functions/&quot;&gt;Azure Functions&lt;/a&gt; for a spin. Functions are a way to do &lt;a href=&quot;https://en.wikipedia.org/wiki/Serverless_computing&quot;&gt;serverless computing&lt;/a&gt; on Azure, and work well for background tasks.  Also, since Functions play nicely with others (&lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/functions-overview/&quot;&gt;C#, F#, Node.js, Python or PHP&lt;/a&gt;) I can get going with Node as a first class citizen.&lt;/p&gt;

&lt;p&gt;So today let’s use NodeJS to create a thumbnail image anytime a new image is uploaded to an Azure Blob Storage container.&lt;/p&gt;

&lt;h2 id=&quot;setup-an-azure-function&quot;&gt;Setup an Azure Function&lt;/h2&gt;
&lt;p&gt;Provision a Function app via an &lt;a href=&quot;https://github.com/Azure/azure-quickstart-templates/tree/master/101-function-app-create-dynamic&quot;&gt;Azure Resource Manager (ARM) Template&lt;/a&gt; or via the &lt;a href=&quot;http://portal.azure.com&quot;&gt;Azure Portal&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/09/image-001.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Functions &lt;em&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/functions-overview/#pricing&quot;&gt;can&lt;/a&gt;&lt;/em&gt; be used with traditional App Service Plans, but really shine with the new Dynamic Plans.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that if you’re using Functions with traditional App Service Plans, &lt;a href=&quot;https://github.com/Azure/azure-webjobs-sdk-script/issues/336#issuecomment-217193565&quot;&gt;enable&lt;/a&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;Always On&lt;/code&gt; feature&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;prep-blob-storage-containers&quot;&gt;Prep blob storage containers&lt;/h2&gt;
&lt;p&gt;In your storage account, create two containers: &lt;code class=&quot;highlighter-rouge&quot;&gt;images-original&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;images-thumbnail&lt;/code&gt;.  We will drop an image into the original container, and output the manipulated into the thumbnail container.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/09/image-000048.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can create these containers in the Azure Portal, but I prefer to use the cross-platform &lt;a href=&quot;http://storageexplorer.com/&quot;&gt;Azure Storage Explorer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/09/image-000047.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;update-function-runtime&quot;&gt;Update Function runtime&lt;/h2&gt;
&lt;p&gt;Open up the Function in the Azure Portal, and you may see that a new version of the Function runtime is available. If so, select the &lt;code class=&quot;highlighter-rouge&quot;&gt;Function App Settings&lt;/code&gt; link in the left navigation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/09/image-000045.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once there the Function can be updated with the click of a button.  It only takes a moment, but will ensure you’re using the most up-to-date and feature-rich version of Azure Functions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/09/image-000046.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configure-bindings&quot;&gt;Configure bindings&lt;/h2&gt;
&lt;p&gt;Now that we have an upgraded Function app, let’s generate a new Function.  Click &lt;code class=&quot;highlighter-rouge&quot;&gt;New Function&lt;/code&gt; from the left navigation, select &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; from the language dropdown, and click on the tile for &lt;code class=&quot;highlighter-rouge&quot;&gt;BlobTrigger - Node&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/09/image-000049.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Configure your path to &lt;code class=&quot;highlighter-rouge&quot;&gt;images-original&lt;/code&gt; and link its storage account.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/09/image-000050.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We now have a trigger to start our Function, however we also need an ouput for the completed thumbnail image. From the left navigation, select &lt;code class=&quot;highlighter-rouge&quot;&gt;Integrate&lt;/code&gt; then in the Outputs column select &lt;code class=&quot;highlighter-rouge&quot;&gt;New Output&lt;/code&gt;. In the menu, choose &lt;code class=&quot;highlighter-rouge&quot;&gt;Azure Storage Blob&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/09/image-000051.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Add your Storage account, and in the path use &lt;code class=&quot;highlighter-rouge&quot;&gt;images-thumbnail&lt;/code&gt;.  After the &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; will determine our filename.  For this we can use the original image name, appending &lt;code class=&quot;highlighter-rouge&quot;&gt;-thumb&lt;/code&gt; as a convention.&lt;/p&gt;

&lt;p&gt;Our Function app will not be triggered anytime a new blob is placed in the storage account’s &lt;code class=&quot;highlighter-rouge&quot;&gt;images-original&lt;/code&gt; container, and will output a finished thumbnail into the &lt;code class=&quot;highlighter-rouge&quot;&gt;images-thumbnail&lt;/code&gt; container without the need for us to write loads of integration code.&lt;/p&gt;

&lt;p&gt;In the Integrate window, toggle the Advanced Editor on and adjust the &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; values in include &lt;code class=&quot;highlighter-rouge&quot;&gt;{name}&lt;/code&gt;.  This will keep the same filename across both containers.  Also add a &lt;code class=&quot;highlighter-rouge&quot;&gt;dataType&lt;/code&gt; attribute to the trigger so that binary data is passed into the Function.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bindings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myBlob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blobTrigger&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;direction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;images-original/{name}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connection&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;thumbnailfunction_STORAGE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dataType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$return&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;images-thumbnail/{name}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connection&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;thumbnailfunction_STORAGE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;direction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;disabled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;add-code&quot;&gt;Add code&lt;/h2&gt;
&lt;p&gt;Now let’s add the code for our Function.  Click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Develop&lt;/code&gt; in the left navigation and replace the Code box with:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Jimp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jimp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myBlob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Read image with Jimp&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Jimp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myBlob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Manipulate image&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Jimp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AUTO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greyscale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Jimp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MIME_JPEG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Check for errors&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`There was an error processing the image.`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Successfully processed the image`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                    &lt;span class=&quot;c1&quot;&gt;// Bind the stream to the output binding to create a new blob&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/09/image-000053.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We load the image, manipulate it by resizing its width to 200px (maintaining aspect ratio), adjust its color to greyscale, and then passing the image stream into the Function’s output binding.&lt;/p&gt;

&lt;p&gt;This code uses the &lt;a href=&quot;https://github.com/oliver-moran/jimp&quot;&gt;Jimp library&lt;/a&gt; (“JavaScript Image Manipulation Program”) to process the image.  There are many Node libraries that handle image manipulation, however Jimp is implemented completely with JavaScript.  This limits the dependencies needed, at the cost of some speed.&lt;/p&gt;

&lt;p&gt;3rd party libraries can be installed in Kudu. See &lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/functions-reference-node/#node-version-amp-package-management&quot;&gt;here&lt;/a&gt; for instructions on package management within Azure Functions, and use &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install jimp --save&lt;/code&gt; to include the package.&lt;/p&gt;

&lt;h2 id=&quot;thumbnail-time&quot;&gt;Thumbnail Time&lt;/h2&gt;
&lt;p&gt;With the &lt;code class=&quot;highlighter-rouge&quot;&gt;Develop&lt;/code&gt; tab open to easily see log output from our Function, drop an image into the Azure Storage Explorer’s &lt;code class=&quot;highlighter-rouge&quot;&gt;images-original&lt;/code&gt; container.&lt;/p&gt;

&lt;p&gt;Here’s a nice 600px by 400px image:
&lt;img src=&quot;/content/images/2016/09/trump.jpg&quot; alt=&quot;trump&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That we’ll drop into the container:
&lt;img src=&quot;/content/images/2016/09/image-000054.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In a few moments we can see logs updating us on the job’s status:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/09/image-000055.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And in checking the &lt;code class=&quot;highlighter-rouge&quot;&gt;images-thumbnail&lt;/code&gt; container there will be a new &lt;code class=&quot;highlighter-rouge&quot;&gt;trump.jpg&lt;/code&gt; awaiting us:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/09/trump-1.jpg&quot; alt=&quot;trumplittle&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note the smaller hands are now a &lt;a href=&quot;https://www.washingtonpost.com/news/morning-mix/wp/2016/08/05/yes-donald-trumps-hands-are-actually-pretty-small/&quot;&gt;more accurate representation&lt;/a&gt; :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;With this Function, any new blob added will be processed and a corresponding thumbnail generated.  This alleviates significant load from our web servers, which now would only have to focus on the initial upload to Azure Blob Storage.&lt;/p&gt;

&lt;p&gt;Furthermore, the use of a Dynamic App Service Plan allows us to only pay for each image that is processed rather than provisioned infrastructure that may sit idle for long periods of time.  It is a more cost effective method of thumbnail generation than many alternatives.&lt;/p&gt;

&lt;p&gt;This example used a blob trigger, however we could have easily used a queue trigger instead to process incoming messages with the same NodeJS code.&lt;/p&gt;

&lt;p&gt;Thanks for reading!
SF&lt;/p&gt;</content><author><name></name></author><summary type="html">Nothing gunks up an application server faster than having to crunch images, yet image manipulation is a common tasks in today’s applications. Let’s take thumbnail generation as an example. Traditionally, if a user uploads an image, our application would generate the thumbnail during the upload event. The user has to sit and wait for the operation to complete, and we have to hope the server has capacity to handle that user’s operation. Worst case we end in errors, failed uploads, and frustrated users.</summary></entry><entry><title type="html">Monitoring Audit Logs in Slack with Event Hubs + Azure Functions</title><link href="http://localhost:4000/2016/05/19/monitoring-azure-audit-logs-with-event-hubs-and-functions/" rel="alternate" type="text/html" title="Monitoring Audit Logs in Slack with Event Hubs + Azure Functions" /><published>2016-05-19T15:45:35-04:00</published><updated>2016-05-19T15:45:35-04:00</updated><id>http://localhost:4000/2016/05/19/monitoring-azure-audit-logs-with-event-hubs-and-functions</id><content type="html" xml:base="http://localhost:4000/2016/05/19/monitoring-azure-audit-logs-with-event-hubs-and-functions/">&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/slack.png&quot; alt=&quot;Colors&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Keeping tabs on an Azure Subscription can be difficult. What’s happening in our environments?  Are operations failing?  These questions are hard enough with a handful of resources, but in a busy subscription containing hundreds of resources we can quickly be searching for needles in a haystack.&lt;/p&gt;

&lt;p&gt;Here’s where logs can help.  Azure Audit Logs give us a consistent way of tracking Operations and Events at the Resource, Resource Group, or Subscription level.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/azure-audit-logs.png&quot; alt=&quot;Azure Audit Logs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These logs get down in the nitty gritty of our resources and serve as a critical tool in tracking changes to our environments over time.  Logs are kept for 90 days, which can be easily extended by configuring continuous export to an Azure Storage Account.  This makes a great use case for the brand new &lt;a href=&quot;https://azure.microsoft.com/en-us/blog/introducing-azure-cool-storage/&quot;&gt;Azure Cool Blob Storage&lt;/a&gt; accounts (I &lt;em&gt;love&lt;/em&gt; that new resource smell!)&lt;/p&gt;

&lt;p&gt;Keeping our logs sitting around until the next ice age is great, but what if I want actionable data right now?  For that we can turn to a new feature of Audit Logs: Export to Azure Event Hub. This &lt;a href=&quot;https://azure.microsoft.com/en-us/blog/new-features-for-azure-diagnostics-and-azure-audit-logs/&quot;&gt;new capability&lt;/a&gt; allows us to pipe log data into an Event Hub, which is optimized for high levels of data ingestion.  Once in the hub, we can interact with that data in a variety of ways.&lt;/p&gt;

&lt;p&gt;For example, we could use Azure Stream Analytics to analyze the data pouring into the hub by taking advantage of its SQL-esque syntax and windowing support.  Or we could get our big data on by processing Event Hub data with &lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/hdinsight-storm-develop-java-event-hub-topology/&quot;&gt;Storm&lt;/a&gt;.  We could roll a &lt;a href=&quot;https://blogs.msdn.microsoft.com/kaevans/2015/02/24/scaling-azure-event-hubs-processing-with-worker-roles/&quot;&gt;Worker Role&lt;/a&gt; with the lovable EventProcessorHost.&lt;/p&gt;

&lt;p&gt;Those are all great options, but sound like a lot of work.  &lt;strong&gt;All I want to do is pop an announcement into Slack whenever there’s an event that I need to take a look at my subscription&lt;/strong&gt;.  Valuing speed, I decided to take the new Azure Functions out for a spin.&lt;/p&gt;

&lt;iframe src=&quot;https://channel9.msdn.com/Shows/Cloud+Cover/Episode-205-Azure-Functions-with-Chris-Anderson/player&quot; width=&quot;960&quot; height=&quot;540&quot; allowfullscreen=&quot;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;(Shout out to my &lt;del&gt;boy&lt;/del&gt; colleague &lt;a href=&quot;https://twitter.com/romitgirdhar&quot;&gt;@romitgirdhar&lt;/a&gt; whose cube used to be near mine in Charlotte)&lt;/p&gt;

&lt;p&gt;Every time I touch Functions I smile like a kid that just got handed a puppy.  As a developer, Functions abstract away as much boilerplate, table stakes code as possible, and allows me to focus on code that I actually care about.  It is delightful, and &lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/functions-overview/&quot;&gt;has support&lt;/a&gt; for C#, Node.js, Python, F#, PHP, batch, bash, Java, &lt;del&gt;and a partridge in a pear tree&lt;/del&gt;.&lt;/p&gt;

&lt;h2 id=&quot;configure-slack&quot;&gt;Configure Slack&lt;/h2&gt;
&lt;p&gt;Let’s start by getting Slack ready to go.  We’ll need to do three things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a new channel that will be dedicated to our alerts&lt;/li&gt;
  &lt;li&gt;Setup a web hook integration that will pipe messages into our channel&lt;/li&gt;
  &lt;li&gt;Connect the web hook to our channel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inside of Slack, create a new channel named “auditlogs” by clicking the “+” icon next to “Channels” on the left hand nav.  From there, select the gear icon at the top and select “Add an app or integration”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/slack-start.png&quot; alt=&quot;Slack start&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will pop a browser window, where you can search for “Incoming WebHooks”.  This integration sets up an endpoint inside of Slack.  Whenever an HTTP post hits that endpoint carrying a message, the message will be inserted into a Slack channel.  Web Hooks are a terrific way to integrate disparate systems in a straightforward manner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/slack-integrations.png&quot; alt=&quot;Slack Integrations&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Follow the wizard to stand up a web hook integration for the “auditlogs” channel, being sure to make note of the “Webhook URL”.  We will need that shortly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/slack-settings.png&quot; alt=&quot;Webhook Settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Taking the URL and the sample from the “Sending Messages” section’s documentation, let’s test that endpoint in &lt;a href=&quot;http://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt; to see webhook functionality in action.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/postman.png&quot; alt=&quot;Postman test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/postman-success.png&quot; alt=&quot;Postman Success&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we send a simple HTTP POST to the endpoint, the object we pass it beautifully appears in our channel. Now that have a Slack integration ready to accept POSTs, let’s fire up Azure.&lt;/p&gt;

&lt;h2 id=&quot;azure&quot;&gt;Azure&lt;/h2&gt;
&lt;p&gt;First off, we need a Service Bus Namespace.  This will serve as a container for our Event Hub.  From the Azure Portal, hit the “+” sign in the top right, and under “Hybrid Integration” select “Service Bus”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/azure-portal-sb.png&quot; alt=&quot;Azure Portal Service Bus&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Currently, the Service Bus functionality has not yet landed in the new portal, so we find ourselves quickly sitting in the Classic Portal.  What we are really after is the Service Bus Namespace, so do not worry too much about the Queue name (we’re about to delete it).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/sb-creation.png&quot; alt=&quot;Service Bus Creation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the Service Bus is provisioned, click into the new resource and delete the queue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/sb-home.png&quot; alt=&quot;Service Bus Home&quot; /&gt;
&lt;img src=&quot;/content/images/2016/05/deletequeue.png&quot; alt=&quot;Delete Queue&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Back in the Ibiza Portal, let’s hook up the Service Bus to our Audit Logs.  Select the flyout from the left nav and search for “Audit” to quickly locate the link for the Audit Log blad. Click it to have the blade flyout.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/portal-search.png&quot; alt=&quot;Portal Search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, click the “Export” button from the top nav to show the export options.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/export-button.png&quot; alt=&quot;Export button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on the section for “Azure Event Hub” and select our Service Bus.  &lt;strong&gt;This export functionality will automatically setup an Event Hub for us&lt;/strong&gt;, hence why we only configured a Service Bus Namespace without an actual Event Hub earlier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/export-eh.png&quot; alt=&quot;EH Export&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;However&lt;/em&gt;, after clicking “OK” the “Export Audit Logs” blade won’t let us save. It wants us to configure a storage account first.  I’m not sure if this is a UI bug (it says right at the top this is “Preview”) or intended behavior, but it creates a dead end.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/greyedout.png&quot; alt=&quot;greyed out options&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I went ahead and created a new storage account (Standard_LRS), and piped it into this configuration area. Also worth mentioning that I selected all the regions available in the previous selection drop down.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/greyedin.png&quot; alt=&quot;Option Available&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the export functionality wired up, we now need a Function to handle our logic.  Provision a new Function in the portal with the little green “+” sign in the top left, putting it in the same Resource Group as the Storage account we created previously.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/function-app.png&quot; alt=&quot;Provision Function&quot; /&gt;
&lt;img src=&quot;/content/images/2016/05/rg-resources.png&quot; alt=&quot;RG Resources&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Opening up our Function, let’s start with “New” in the top left. Selecting “Node.js” and “Core” from the dropdowns, click the tile for “EventHubTrigger - Node”.  This template will get us started with an input binding for Event Hubs. Input and output bindings mean we don’t have to write all the code to hook into and transfer data between a data source - in this case, an Event Hub.  It’s magic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/new-function.png&quot; alt=&quot;New Function Settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Scrolling down we can configure the input binding. Remember when I said the Audit Log Export feature creates an event hub for us? It’s named “insights-operational-logs”.  Fill that in, and click “Select” next to the Event Hub Connection box.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/binding-config.png&quot; alt=&quot;Binding Config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s where we connect back to our Event Hub.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/connection-setup.png&quot; alt=&quot;SB Config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Only problem is that we haven’t yet setup a Shared Access Policy.  We need a SAP to get a connection string.  Sorry to keep jumping between portals, but open Classic Portal in a new tab.  From there, open our Event Hub and click the “Configure” tab. Here we can create a new Shared Access Policy with “Listen” Permissions.  This permission level allows our Function to read items off of the Event Hub. Click save, then head to the Dashboard tab on the top nav.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/eh-policy.png&quot; alt=&quot;EH Policy Setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the dashboard of our Event Hub, click “Connection Strings” on the bottom nav bar and copy the String for the policy name you just created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/eh-string.png&quot; alt=&quot;EH String&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Back in the new portal’s tab, use the connection string to complete the “Add a Service Bus Connection” blade.  Before pasting, remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;;EntityPath=insights-operational-logs&lt;/code&gt; from the end of the string.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Endpoint=sb://auditlogprocessor-ns.servicebus.windows.net/;SharedAccessKeyName=FunctionPolicy;SharedAccessKey=Fc1et/idbtoprwO5K1MLaFgegXTuXpdR/eUW2Dm3swc=;EntityPath=insights-operational-logs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;becomes&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Endpoint=sb://auditlogprocessor-ns.servicebus.windows.net/;SharedAccessKeyName=FunctionPolicy;SharedAccessKey=Fc1et/idbtoprwO5K1MLaFgegXTuXpdR/eUW2Dm3swc=&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The entity is handled in “Event Hub Name” box in the function binding configuration.  Click on and then “Create” the function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/sbconn.png&quot; alt=&quot;SB Connection&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/function-setup-finish.png&quot; alt=&quot;Function Setup Finished&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We now have a Function App ready for us. You may see a flurry of activity as your Function comes online and processes the logs that have been piped from the Audit Logs into the Event Hub.  These logs have been sitting in the Event Hub just waiting for a consumer (our Function) to come pick them up and process them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/logs-catchup.png&quot; alt=&quot;Console catchup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now for our custom code.  We want to do a variety of things&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Loop through each received log entry, as the Event Hub sends us an array of entries&lt;/li&gt;
  &lt;li&gt;Discard any log entries that are Informational in nature. There are &lt;strong&gt;tons&lt;/strong&gt; of these generated by the Azure service, and they do not typically require immediate attention&lt;/li&gt;
  &lt;li&gt;Build a response packet of formatted strings&lt;/li&gt;
  &lt;li&gt;Send response to the Slack Web Hook endpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For these activities, we use the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;use strict&quot;;

var request = require('request');

module.exports = function (context, myEventHubTrigger) {

    context.log('======================================================');
    context.log('Node.js eventhub trigger function processed work item');

    // Grab logs from the returned records object
    var logs = myEventHubTrigger.records;

    // Prepare a response
    // Multiple logs may be received, but we'll batch into one response 
    var alert = [];

    // Loop through the logs
    var counter = 0;
    logs.forEach(function (log) {

        // Only process logs that are non-informational or a new RG
        // This cuts down on chatter everytime Azure ties its shoes
        if (log.level !== 'Information' || log.operationName === 'MICROSOFT.RESOURCES/SUBSCRIPTIONS/RESOURCEGROUPS/WRITE') {

            // Build out an alert's markup
            alert.push(buildAlert(log));

        }

        // Iterate counter and check progress
        counter++;
        if (counter === logs.length) {

            context.log('Finished looping through logs');

            // Finished iterating, send batched alert
            sendAlert(context, alert);

        }

    });

};

function buildAlert(log) {

    // String build via an array
    // Using ES6 Template Literals 
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals
    var logContent = [
        `time:\t ${log.time}`,
        `tenantId:\t ${log.identity.claims[&quot;http://schemas.microsoft.com/identity/claims/tenantid&quot;]}`,
        `operationName:\t ${log.operationName}`,
        `category:\t ${log.category}`,
        `resultType:\t ${log.resultType}`,
        `resultSignature:\t ${log.resultSignature}`,
        `identity:\t ${log.identity.claims.name} (${log.identity.claims[&quot;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn&quot;]})`,
        `location:\t ${log.location}`,
        `resourceId: ${log.resourceId}`
    ];

    // Determine color for alert
    var color;
    switch (log.level) {
        case 'Error':
            color = 'danger';
            break;
        case 'Warning':
            color = 'warning';
            break;
        case 'Information':
            color = '#439FE0';
            break;
    }

    // Create object to return
    var formattedLog = {
        &quot;fallback&quot;: logContent.join('\n'),
        &quot;color&quot;: color,
        &quot;fields&quot;: [
            {
                &quot;title&quot;: log.level,
                &quot;value&quot;: logContent.join('\n'),
                &quot;short&quot;: false
            }
        ]
    };

    // Return
    return formattedLog;

}

function sendAlert(context, alert) {

    // Send alert to Slack webhook
    request.post(process.env.SLACK_WEBHOOK_URL, {
        json: {
            &quot;username&quot;: &quot;audit-bot&quot;,
            &quot;icon_url&quot;: &quot;https://pbs.twimg.com/profile_images/546024114272468993/W9gT7hZo.png&quot;,
            &quot;attachments&quot;: alert
        }
    }, function (error) {

        if (error) {
            context.log('Error posting the message');
            context.done(error);
        }
        else {
            context.log('Successfully posted the message');
            context.done();
        }

    });

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our code needs a few additional last pieces to function.  In &lt;code class=&quot;highlighter-rouge&quot;&gt;sendAlert()&lt;/code&gt; we’re using an environmental variable rather than hardcoding the URL directly into our code.  This makes the function more flexible.&lt;/p&gt;

&lt;p&gt;To set that environmental variable, click “Function App Settings” in the top right corner of the Function designer and select “Go to App Service Settings”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/function-app-settings.png&quot; alt=&quot;App Settings Blade&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oh hello there, App Service Blade! You look familiar! From here, we can head to Settings -&amp;gt; Application Settings to add in an environmental variable named &lt;code class=&quot;highlighter-rouge&quot;&gt;SLACK_WEBHOOK_URL&lt;/code&gt;, just like any other Azure Web App.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/settings.png&quot; alt=&quot;Function App Settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also note that there’s an App Setting called “EventHubConnection”.  That should also look familiar, as it’s the connection we previously configured in the Function’s binding configuration. Save the Application S&lt;/p&gt;

&lt;p&gt;One more comment on the code from above is that we have a dependency on a NPM library named &lt;a href=&quot;https://github.com/request/request&quot;&gt;“Request”&lt;/a&gt;.  We need to go add this library into our Function, or else the code will fail. On the main App Service Blade, click “Browse” on the top nav to pop a new tab navigating to our Function app’s URL.&lt;/p&gt;

&lt;p&gt;Spoiler: it’s going to be anti-climactic.  We don’t have pages to serve back, so you all you’ll see is a lovely white screen.  Instead, let’s head over to the Kudu add &lt;code class=&quot;highlighter-rouge&quot;&gt;.scm&lt;/code&gt; into the URL structure right before &lt;code class=&quot;highlighter-rouge&quot;&gt;.azurewebsites.net&lt;/code&gt;. Our original URL of &lt;code class=&quot;highlighter-rouge&quot;&gt;http://auditlogfunction.azurewebsites.net/&lt;/code&gt; becomes &lt;code class=&quot;highlighter-rouge&quot;&gt;http://auditlogfunction.scm.azurewebsites.net/&lt;/code&gt; and voila! Kudu Time™.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/kudu.png&quot; alt=&quot;Kudu Home&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click the “Debug Console” from the top nav and select PowerShell.  From here we can navigate to our Function app by selecting site -&amp;gt; wwwroot -&amp;gt; AuditLogProcessor (our function name).  In this directory we can see &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; containing the code we pasted in earlier, and &lt;code class=&quot;highlighter-rouge&quot;&gt;function.json&lt;/code&gt; containing the bindings for our Function.&lt;/p&gt;

&lt;p&gt;Click into the console, type in &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install request&lt;/code&gt; and hit enter. The package will be installed and our app is ready to rock.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/kudu-console.png&quot; alt=&quot;Console&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We could have provided an entire &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; chalked full of NPM dependencies, but either way we get a lovely &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/finished.png&quot; alt=&quot;NPM modules&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;We now have an Azure Function that pulls messages off of an Event Hub, which is receiving a steady stream of data from the Azure Audit Logs.  The Function then hits a Slack WebHook to alert me that I need to take action.  Slack even gives us pretty colors to use in distinguishing Informational logs from Errors or Warnings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/05/slack.png&quot; alt=&quot;Colors&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;p&gt;(Oh and that was a ton of steps. Take the easy way and &lt;a href=&quot;https://github.com/stevenfollis/Samples/tree/master/AuditLogFunction&quot;&gt;download this ARM Template&lt;/a&gt; that deploys all the above infrastructure AND does a Web Deploy of the Function code. I won’t judge.)&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Deploying a Node.js API with Loopback to Azure Web Apps</title><link href="http://localhost:4000/2016/03/27/deploying-a-loopback-node-js-api-on-azure-web-apps/" rel="alternate" type="text/html" title="Deploying a Node.js API with Loopback to Azure Web Apps" /><published>2016-03-27T19:39:36-04:00</published><updated>2016-03-27T19:39:36-04:00</updated><id>http://localhost:4000/2016/03/27/deploying-a-loopback-node-js-api-on-azure-web-apps</id><content type="html" xml:base="http://localhost:4000/2016/03/27/deploying-a-loopback-node-js-api-on-azure-web-apps/">&lt;p&gt;&lt;a href=&quot;http://expressjs.com/&quot;&gt;ExpressJS&lt;/a&gt; is a terrific starting point for creating APIs with Node.js, but can quickly difficult to manage on large, complex projects.  Addressing this issue is an entire ecosystem of frameworks that has grown up around providing opinionated structure to API development, and one such framework is IBM Strongloop’s &lt;a href=&quot;http://loopback.io/&quot;&gt;Loopback&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Loopback is a framework for developing mature RESTful API’s in the enterprise.  You define a data model, autogenerate a slew of endpoints for that model, and then connect to a variety of backend data storage mechanisms.  It’s terrific, especially when coming from the wide open spaces of vanilla ExpressJS.&lt;/p&gt;

&lt;p&gt;However, by default it is a bit of a pain to deploy Loopback to the &lt;a href=&quot;https://azure.microsoft.com/en-us/services/app-service/web/&quot;&gt;Azure App Service&lt;/a&gt;.  Kudu, the mechanism built into Azure Web Apps that typically makes git deployments a breeze, isn’t BFF’s with Loopback.&lt;/p&gt;

&lt;p&gt;So let’s do a quick deployment.  For starters, let’s install Loopback via &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g strongloop&lt;/code&gt;. This wires up a generator that we can use to start a project.  Next, we’ll use that generator to scaffold out a project with &lt;code class=&quot;highlighter-rouge&quot;&gt;slc loopback&lt;/code&gt;. I chose the preset for “hello-world” so that we’ll start with a model.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/03/Screen-Shot-2016-03-27-at-8-20-51-PM.png&quot; alt=&quot;Terminal Commands&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the scaffold is complete, hit &lt;code class=&quot;highlighter-rouge&quot;&gt;node .&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt; to fire up your new API.  In a browser, head over to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000/explorer&lt;/code&gt; to view the slick Explorer user interface that makes visualizing our API extremely elegant.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/03/Screen-Shot-2016-03-27-at-8-26-36-PM.png&quot; alt=&quot;Explorer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Having a working API on a local machine is dandy, but we need to deploy this bad boy up to Azure.  Typically we’d simply add a &lt;code class=&quot;highlighter-rouge&quot;&gt;git remote&lt;/code&gt; pointing to our Azure Web App’s endpoint, as laid out &lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/web-sites-nodejs-develop-deploy-mac/&quot;&gt;here&lt;/a&gt;.  However, when we follow those steps and deploy all we will get is a broken app.  Turns out that &lt;a href=&quot;https://github.com/projectkudu/kudu&quot;&gt;Kudu&lt;/a&gt;, the management and deployment engine for Azure Web Apps, does not like Loopback’s default project structure.&lt;/p&gt;

&lt;p&gt;To get Loopback to play nicely with Azure, we need to make one small adjustment: adding a file at the root the startup out application.  To do that, create an &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; file with a few basic lines of code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var app = require('./server/server.js')
app.start();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/04/Screen-Shot-2016-04-02-at-6-56-24-AM.png&quot; alt=&quot;VSCode Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Git push&lt;/code&gt; that change up to your Azure Web App, navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;/explorer&lt;/code&gt; and you should be good to go with a nicely scaffolded out RESTful Node.js application.&lt;/p&gt;

&lt;p&gt;If you’re looking for the Swagger definition for use with API Apps, head over to &lt;code class=&quot;highlighter-rouge&quot;&gt;/explorer/swagger.json&lt;/code&gt; and you should have the entire autogenerated schema ready for you with a bow on top.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</content><author><name></name></author><summary type="html">ExpressJS is a terrific starting point for creating APIs with Node.js, but can quickly difficult to manage on large, complex projects. Addressing this issue is an entire ecosystem of frameworks that has grown up around providing opinionated structure to API development, and one such framework is IBM Strongloop’s Loopback.</summary></entry></feed>